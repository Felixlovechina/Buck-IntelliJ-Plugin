{
  parserClass="com.intellij.plugin.buck.lang.BuckParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Buck"
  psiImplClassSuffix="Impl"
  psiPackage="com.intellij.plugin.buck.lang.psi"
  psiImplPackage="com.intellij.plugin.buck.lang.psi.impl"

  elementTypeHolderClass="com.intellij.plugin.buck.lang.psi.BuckTypes"
  elementTypeClass="com.intellij.plugin.buck.lang.psi.BuckElementType"
  tokenTypeClass="com.intellij.plugin.buck.lang.psi.BuckTokenType"

  tokens = [
    NONE = 'None'
    BOOLEAN = 'regexp:(True|False)'

    COMMA = ','
    EQUAL = '='
    SLASH = '\'
    PLUS = '+'

    LINE_COMMENT = 'regexp:#.*'

    GLOB_KEYWORD = 'regexp:(glob|subdir_glob)'
    GLOB_EXCLUDES_KEYWORD = 'excludes'

    MACROS = "regexp:([A-Z])([A-Z]|[0-9])*"

    DOUBLE_QUOTED_STRING="regexp:\"([^\\\"\r\n]|\\[^\r\n])*\"?"
    SINGLE_QUOTED_STRING="regexp:'([^\\\'\r\n]|\\[^\r\n])*'?"

    L_PARENTHESES = '('
    L_BRACKET = '['
    R_PARENTHESES = ')'
    R_BRACKET = ']'

    NUMBER = 'regexp:-?(0|[1-9]\d*)(\.\d+)?([eE][+-]?\d*)?'
    IDENTIFIER = 'regexp:[:jletter:] [:jletterdigit:]*'
  ]
}

buckFile ::= item_*

private item_ ::= (rule_block | property | LINE_COMMENT)

property_lvalue ::= IDENTIFIER | MACROS
property ::= property_lvalue '=' expression

// Only support "+" as operator right now.
private operator ::= PLUS
expression ::= (value operator)* [value]

value ::= DOUBLE_QUOTED_STRING | SINGLE_QUOTED_STRING |
          NONE | BOOLEAN | NUMBER | MACROS | value_array | list | glob_block

list ::= '(' list_elements ')'
list_elements ::= (value ',')* [value [',']]

value_array ::= '[' array_elements ']'
array_elements ::= (value ',')* [value [',']]

rule_name ::= IDENTIFIER
rule_block ::= rule_name '(' rule_body ')'
rule_body ::= (property ',')* [property [',']]

glob_block ::= GLOB_KEYWORD '(' glob_elements ')'
glob_elements ::= value_array [',' GLOB_EXCLUDES_KEYWORD '=' value_array]
