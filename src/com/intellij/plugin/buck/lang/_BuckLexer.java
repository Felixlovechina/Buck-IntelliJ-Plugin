/* The following code was generated by JFlex 1.4.3 on 7/25/15 4:49 PM */

package com.intellij.plugin.buck.lang;

import com.intellij.lexer.FlexLexer;
import com.intellij.plugin.buck.lang.psi.BuckTypes;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 7/25/15 4:49 PM from the specification file
 * <tt>/Users/cjlm/Projects/buck_idea_plugin/src/com/intellij/plugin/buck/lang/Buck.flex</tt>
 */
public class _BuckLexer implements FlexLexer, BuckTypes {
  /**
   * initial size of the lookahead buffer
   */
  private static final int ZZ_BUFFERSIZE = 16384;

  /**
   * lexical states
   */
  public static final int WAITING_VALUE = 2;
  public static final int SINGLE_QUOTE_STRING = 6;
  public static final int YYINITIAL = 0;
  public static final int DOUBLE_QUOTE_STRING = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   * at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
      0, 0, 0, 0, 0, 0, 0, 0
  };

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
      "\11\0\1\1\1\2\1\0\1\1\1\2\22\0\1\1\1\0\1\55" +
          "\1\4\3\0\1\54\1\56\1\57\2\0\1\60\3\0\7\41\1\37" +
          "\2\41\1\0\1\61\1\0\1\5\3\0\1\50\3\40\1\47\1\44" +
          "\5\40\1\51\1\40\1\53\3\40\1\45\1\52\1\43\1\46\5\40" +
          "\1\56\1\3\1\57\1\0\1\17\1\0\1\22\1\24\1\26\1\23" +
          "\1\7\1\20\1\6\1\35\1\21\1\33\1\31\1\13\1\14\1\10" +
          "\1\15\1\30\1\36\1\11\1\27\1\16\1\12\1\34\1\36\1\32" +
          "\1\25\1\36\1\56\1\0\1\57\54\0\1\42\12\0\1\42\4\0" +
          "\1\42\5\0\27\42\1\0\37\42\1\0\u01ca\42\4\0\14\42\16\0" +
          "\5\42\7\0\1\42\1\0\1\42\201\0\5\42\1\0\2\42\2\0" +
          "\4\42\10\0\1\42\1\0\3\42\1\0\1\42\1\0\24\42\1\0" +
          "\123\42\1\0\213\42\10\0\236\42\11\0\46\42\2\0\1\42\7\0" +
          "\47\42\110\0\33\42\5\0\3\42\55\0\53\42\43\0\2\42\1\0" +
          "\143\42\1\0\1\42\17\0\2\42\7\0\2\42\12\0\3\42\2\0" +
          "\1\42\20\0\1\42\1\0\36\42\35\0\131\42\13\0\1\42\30\0" +
          "\41\42\11\0\2\42\4\0\1\42\5\0\26\42\4\0\1\42\11\0" +
          "\1\42\3\0\1\42\27\0\31\42\107\0\1\42\1\0\13\42\127\0" +
          "\66\42\3\0\1\42\22\0\1\42\7\0\12\42\17\0\7\42\1\0" +
          "\7\42\5\0\10\42\2\0\2\42\2\0\26\42\1\0\7\42\1\0" +
          "\1\42\3\0\4\42\3\0\1\42\20\0\1\42\15\0\2\42\1\0" +
          "\3\42\16\0\2\42\23\0\6\42\4\0\2\42\2\0\26\42\1\0" +
          "\7\42\1\0\2\42\1\0\2\42\1\0\2\42\37\0\4\42\1\0" +
          "\1\42\23\0\3\42\20\0\11\42\1\0\3\42\1\0\26\42\1\0" +
          "\7\42\1\0\2\42\1\0\5\42\3\0\1\42\22\0\1\42\17\0" +
          "\2\42\43\0\10\42\2\0\2\42\2\0\26\42\1\0\7\42\1\0" +
          "\2\42\1\0\5\42\3\0\1\42\36\0\2\42\1\0\3\42\17\0" +
          "\1\42\21\0\1\42\1\0\6\42\3\0\3\42\1\0\4\42\3\0" +
          "\2\42\1\0\1\42\1\0\2\42\3\0\2\42\3\0\3\42\3\0" +
          "\14\42\26\0\1\42\64\0\10\42\1\0\3\42\1\0\27\42\1\0" +
          "\12\42\1\0\5\42\3\0\1\42\32\0\2\42\6\0\2\42\43\0" +
          "\10\42\1\0\3\42\1\0\27\42\1\0\12\42\1\0\5\42\3\0" +
          "\1\42\40\0\1\42\1\0\2\42\17\0\2\42\22\0\10\42\1\0" +
          "\3\42\1\0\51\42\2\0\1\42\20\0\1\42\21\0\2\42\30\0" +
          "\6\42\5\0\22\42\3\0\30\42\1\0\11\42\1\0\1\42\2\0" +
          "\7\42\72\0\60\42\1\0\2\42\14\0\7\42\72\0\2\42\1\0" +
          "\1\42\2\0\2\42\1\0\1\42\2\0\1\42\6\0\4\42\1\0" +
          "\7\42\1\0\3\42\1\0\1\42\1\0\1\42\2\0\2\42\1\0" +
          "\4\42\1\0\2\42\11\0\1\42\2\0\5\42\1\0\1\42\25\0" +
          "\4\42\40\0\1\42\77\0\10\42\1\0\44\42\33\0\5\42\163\0" +
          "\53\42\24\0\1\42\20\0\6\42\4\0\4\42\3\0\1\42\3\0" +
          "\2\42\7\0\3\42\4\0\15\42\14\0\1\42\21\0\46\42\1\0" +
          "\1\42\5\0\1\42\2\0\53\42\1\0\u014d\42\1\0\4\42\2\0" +
          "\7\42\1\0\1\42\1\0\4\42\2\0\51\42\1\0\4\42\2\0" +
          "\41\42\1\0\4\42\2\0\7\42\1\0\1\42\1\0\4\42\2\0" +
          "\17\42\1\0\71\42\1\0\4\42\2\0\103\42\45\0\20\42\20\0" +
          "\125\42\14\0\u026c\42\2\0\21\42\1\0\32\42\5\0\113\42\25\0" +
          "\15\42\1\0\4\42\16\0\22\42\16\0\22\42\16\0\15\42\1\0" +
          "\3\42\17\0\64\42\43\0\1\42\4\0\1\42\103\0\130\42\10\0" +
          "\51\42\1\0\1\42\5\0\106\42\12\0\35\42\63\0\36\42\2\0" +
          "\5\42\13\0\54\42\25\0\7\42\70\0\27\42\11\0\65\42\122\0" +
          "\1\42\135\0\57\42\21\0\7\42\67\0\36\42\15\0\2\42\12\0" +
          "\54\42\32\0\44\42\51\0\3\42\12\0\44\42\153\0\4\42\1\0" +
          "\4\42\3\0\2\42\11\0\300\42\100\0\u0116\42\2\0\6\42\2\0" +
          "\46\42\2\0\6\42\2\0\10\42\1\0\1\42\1\0\1\42\1\0" +
          "\1\42\1\0\37\42\2\0\65\42\1\0\7\42\1\0\1\42\3\0" +
          "\3\42\1\0\7\42\3\0\4\42\2\0\6\42\4\0\15\42\5\0" +
          "\3\42\1\0\7\42\164\0\1\42\15\0\1\42\20\0\15\42\145\0" +
          "\1\42\4\0\1\42\2\0\12\42\1\0\1\42\3\0\5\42\6\0" +
          "\1\42\1\0\1\42\1\0\1\42\1\0\4\42\1\0\13\42\2\0" +
          "\4\42\5\0\5\42\4\0\1\42\64\0\2\42\u0a7b\0\57\42\1\0" +
          "\57\42\1\0\205\42\6\0\4\42\3\0\2\42\14\0\46\42\1\0" +
          "\1\42\5\0\1\42\2\0\70\42\7\0\1\42\20\0\27\42\11\0" +
          "\7\42\1\0\7\42\1\0\7\42\1\0\7\42\1\0\7\42\1\0" +
          "\7\42\1\0\7\42\1\0\7\42\120\0\1\42\u01d5\0\2\42\52\0" +
          "\5\42\5\0\2\42\4\0\126\42\6\0\3\42\1\0\132\42\1\0" +
          "\4\42\5\0\51\42\3\0\136\42\21\0\33\42\65\0\20\42\u0200\0" +
          "\u19b6\42\112\0\u51cd\42\63\0\u048d\42\103\0\56\42\2\0\u010d\42\3\0" +
          "\20\42\12\0\2\42\24\0\57\42\20\0\31\42\10\0\106\42\61\0" +
          "\11\42\2\0\147\42\2\0\4\42\1\0\4\42\14\0\13\42\115\0" +
          "\12\42\1\0\3\42\1\0\4\42\1\0\27\42\35\0\64\42\16\0" +
          "\62\42\76\0\6\42\3\0\1\42\16\0\34\42\12\0\27\42\31\0" +
          "\35\42\7\0\57\42\34\0\1\42\60\0\51\42\27\0\3\42\1\0" +
          "\10\42\24\0\27\42\3\0\1\42\5\0\60\42\1\0\1\42\3\0" +
          "\2\42\2\0\5\42\2\0\1\42\1\0\1\42\30\0\3\42\2\0" +
          "\13\42\7\0\3\42\14\0\6\42\2\0\6\42\2\0\6\42\11\0" +
          "\7\42\1\0\7\42\221\0\43\42\35\0\u2ba4\42\14\0\27\42\4\0" +
          "\61\42\u2104\0\u016e\42\2\0\152\42\46\0\7\42\14\0\5\42\5\0" +
          "\1\42\1\0\12\42\1\0\15\42\1\0\5\42\1\0\1\42\1\0" +
          "\2\42\1\0\2\42\1\0\154\42\41\0\u016b\42\22\0\100\42\2\0" +
          "\66\42\50\0\14\42\164\0\5\42\1\0\207\42\44\0\32\42\6\0" +
          "\32\42\13\0\131\42\3\0\6\42\2\0\6\42\2\0\6\42\2\0" +
          "\3\42\43\0";

  /**
   * Translates characters to character classes
   */
  private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int[] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
      "\1\0\1\1\1\2\1\3\1\4\7\1\1\5\13\1" +
          "\2\5\1\1\3\5\2\6\1\7\1\10\1\11\1\12" +
          "\41\1\1\0\4\5\1\1\5\6\10\1\1\13\13\1" +
          "\1\13\23\1\1\0\1\5\1\0\2\5\1\1\2\0" +
          "\2\1\1\14\11\1\1\15\26\1\1\0\1\15\1\16" +
          "\2\0\41\1\3\0\17\1\1\14\16\1\1\0\25\1" +
          "\1\13\3\1\1\0\25\1\1\0\16\1\1\13\11\1" +
          "\1\0\26\1\1\0\20\1\1\0\14\1\1\0\12\1" +
          "\1\0\11\1\1\0\4\1\1\0\3\1\1\0\3\1" +
          "\1\14\11\1";

  private static int[] zzUnpackAction() {
    int[] result = new int[404];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int[] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
      "\0\0\0\62\0\144\0\226\0\62\0\310\0\372\0\u012c" +
          "\0\u015e\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a\0\u02bc" +
          "\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a\0\u044c" +
          "\0\u047e\0\u04b0\0\u04e2\0\u0514\0\u0546\0\u0578\0\u05aa\0\u05dc" +
          "\0\62\0\62\0\62\0\62\0\u060e\0\u0640\0\u0672\0\u06a4" +
          "\0\u06d6\0\u0708\0\u073a\0\u076c\0\u079e\0\u07d0\0\u0802\0\u0834" +
          "\0\u0866\0\u0898\0\u08ca\0\u08fc\0\u092e\0\u0960\0\u0992\0\u09c4" +
          "\0\u09f6\0\u0a28\0\u0a5a\0\u0a8c\0\u0abe\0\u0af0\0\u0b22\0\u0b54" +
          "\0\u0b86\0\u0bb8\0\u0bea\0\u0c1c\0\u0c4e\0\u0c80\0\u0cb2\0\u0ce4" +
          "\0\u0d16\0\u0d48\0\u0d7a\0\u0dac\0\62\0\u0dde\0\u0e10\0\u0e42" +
          "\0\u0e74\0\u0ea6\0\u0ed8\0\u0f0a\0\u0f3c\0\u0f6e\0\u0fa0\0\u0fd2" +
          "\0\u1004\0\u1036\0\u1068\0\u109a\0\u10cc\0\u10fe\0\u1130\0\u1162" +
          "\0\u1194\0\u11c6\0\u11f8\0\u122a\0\u0190\0\u125c\0\u128e\0\u12c0" +
          "\0\u12f2\0\u1324\0\u1356\0\u1388\0\u13ba\0\u13ec\0\u141e\0\u1450" +
          "\0\u1482\0\u14b4\0\u14e6\0\u1518\0\u154a\0\u157c\0\u15ae\0\u15e0" +
          "\0\u1612\0\u1644\0\u1676\0\u16a8\0\u16da\0\u170c\0\u173e\0\u1770" +
          "\0\u17a2\0\u17d4\0\u0190\0\u1806\0\u1838\0\u186a\0\u189c\0\u18ce" +
          "\0\u1900\0\u1932\0\u1964\0\u1996\0\u0190\0\u19c8\0\u19fa\0\u1a2c" +
          "\0\u1a5e\0\u1a90\0\u1ac2\0\u1af4\0\u1b26\0\u1b58\0\u1b8a\0\u1bbc" +
          "\0\u1bee\0\u1c20\0\u1c52\0\u1c84\0\u1cb6\0\u1ce8\0\u1d1a\0\u1d4c" +
          "\0\u1d7e\0\u1db0\0\u1de2\0\u1e14\0\u04b0\0\u0190\0\u1e46\0\u1e78" +
          "\0\u1eaa\0\u1edc\0\u1f0e\0\u1f40\0\u1f72\0\u1fa4\0\u1fd6\0\u2008" +
          "\0\u203a\0\u206c\0\u209e\0\u20d0\0\u2102\0\u2134\0\u2166\0\u2198" +
          "\0\u21ca\0\u21fc\0\u222e\0\u2260\0\u2292\0\u22c4\0\u22f6\0\u2328" +
          "\0\u235a\0\u238c\0\u23be\0\u23f0\0\u2422\0\u2454\0\u2486\0\u24b8" +
          "\0\u24ea\0\u251c\0\u254e\0\u2580\0\u25b2\0\u25e4\0\u2616\0\u2648" +
          "\0\u267a\0\u26ac\0\u26de\0\u2710\0\u2742\0\u2774\0\u27a6\0\u27d8" +
          "\0\u280a\0\u283c\0\u286e\0\u04e2\0\u28a0\0\u28d2\0\u2904\0\u2936" +
          "\0\u2968\0\u299a\0\u29cc\0\u29fe\0\u2a30\0\u2a62\0\u2a94\0\u2ac6" +
          "\0\u2af8\0\u2b2a\0\u2b5c\0\u2b8e\0\u2bc0\0\u2bf2\0\u2c24\0\u2c56" +
          "\0\u2c88\0\u2cba\0\u2cec\0\u2d1e\0\u2d50\0\u2d82\0\u2db4\0\u2de6" +
          "\0\u2e18\0\u2e4a\0\u2e7c\0\u2eae\0\u2ee0\0\u2f12\0\u2f44\0\u2f76" +
          "\0\u2fa8\0\u2fda\0\u300c\0\u303e\0\u3070\0\u30a2\0\u30d4\0\u3106" +
          "\0\u3138\0\u316a\0\u319c\0\u31ce\0\u3200\0\u3232\0\u3264\0\u3296" +
          "\0\u32c8\0\u32fa\0\u332c\0\u335e\0\u3390\0\u33c2\0\u33f4\0\u3426" +
          "\0\u3458\0\u348a\0\u34bc\0\u34ee\0\u3520\0\u3552\0\u3584\0\u35b6" +
          "\0\u35e8\0\u361a\0\u364c\0\u367e\0\u36b0\0\u36e2\0\u3714\0\u3746" +
          "\0\u3778\0\u04e2\0\u37aa\0\u37dc\0\u380e\0\u3840\0\u3872\0\u38a4" +
          "\0\u38d6\0\u3908\0\u393a\0\u396c\0\u399e\0\u39d0\0\u3a02\0\u3a34" +
          "\0\u3a66\0\u3a98\0\u3aca\0\u3afc\0\u3b2e\0\u3b60\0\u3b92\0\u3bc4" +
          "\0\u3bf6\0\u3c28\0\u3c5a\0\u3c8c\0\u3cbe\0\u3cf0\0\u3d22\0\u3d54" +
          "\0\u3d86\0\u3db8\0\u3dea\0\u3e1c\0\u3e4e\0\u3e80\0\u3eb2\0\u3ee4" +
          "\0\u3f16\0\u3f48\0\u3f7a\0\u3fac\0\u3fde\0\u4010\0\u4042\0\u4074" +
          "\0\u40a6\0\u40d8\0\u410a\0\u413c\0\u416e\0\u41a0\0\u41d2\0\u4204" +
          "\0\u4236\0\u4268\0\u429a\0\u42cc\0\u42fe\0\u4330\0\u4362\0\u4394" +
          "\0\u43c6\0\u43f8\0\u442a\0\u445c\0\u448e\0\u44c0\0\u44f2\0\u4524" +
          "\0\u4556\0\u4588\0\u45ba\0\u45ec\0\u461e\0\u4650\0\u4682\0\u46b4" +
          "\0\u46e6\0\u4718\0\u474a\0\u477c\0\u47ae\0\u47e0\0\u4812\0\u4844" +
          "\0\u4876\0\u48a8\0\u48da\0\u490c\0\u493e\0\u4970\0\u49a2\0\u49d4" +
          "\0\u4a06\0\u4a38\0\62\0\u4a6a\0\u4a9c\0\u4ace\0\u4b00\0\u4b32" +
          "\0\u4b64\0\u4b96\0\u4bc8\0\u4bfa";

  private static int[] zzUnpackRowMap() {
    int[] result = new int[404];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int[] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int[] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
      "\1\2\2\3\1\2\1\4\1\5\1\6\1\7\1\10" +
          "\1\11\2\12\1\13\1\12\1\14\1\15\1\16\1\17" +
          "\1\20\1\21\1\22\1\12\1\23\1\24\1\25\1\26" +
          "\1\12\1\27\1\30\2\12\1\31\1\32\1\31\1\33" +
          "\1\34\1\35\6\32\1\36\1\37\1\40\1\41\1\42" +
          "\1\43\1\44\63\0\2\3\57\0\2\4\1\0\57\4" +
          "\6\0\1\12\1\45\3\12\1\46\3\12\1\47\22\12" +
          "\1\33\11\12\14\0\11\12\1\47\12\12\1\50\7\12" +
          "\1\33\11\12\14\0\11\12\1\47\2\12\1\51\1\52" +
          "\16\12\1\33\11\12\14\0\1\12\1\53\5\12\1\54" +
          "\1\12\1\47\22\12\1\33\11\12\14\0\11\12\1\47" +
          "\22\12\1\33\11\12\14\0\11\12\1\47\2\12\1\55" +
          "\17\12\1\33\11\12\14\0\1\12\1\56\1\12\1\57" +
          "\5\12\1\47\22\12\1\33\11\12\14\0\11\33\1\15" +
          "\17\33\3\15\1\33\11\15\14\0\11\12\1\47\2\12" +
          "\1\60\17\12\1\33\11\12\14\0\2\12\1\61\3\12" +
          "\1\62\2\12\1\47\22\12\1\33\11\12\14\0\2\12" +
          "\1\63\6\12\1\47\1\12\1\64\1\65\4\12\1\66" +
          "\1\67\11\12\1\33\11\12\14\0\1\12\1\70\7\12" +
          "\1\71\22\12\1\33\11\12\14\0\11\12\1\47\1\12" +
          "\1\72\20\12\1\33\11\12\14\0\7\12\1\73\1\12" +
          "\1\47\12\12\1\74\7\12\1\33\11\12\14\0\3\12" +
          "\1\75\3\12\1\76\1\77\1\47\22\12\1\33\11\12" +
          "\14\0\3\12\1\100\5\12\1\47\2\12\1\101\2\12" +
          "\1\102\14\12\1\33\11\12\14\0\1\12\1\103\7\12" +
          "\1\47\22\12\1\33\11\12\14\0\11\12\1\47\2\12" +
          "\1\104\17\12\1\33\11\12\14\0\11\12\1\47\1\12" +
          "\1\105\20\12\1\33\11\12\14\0\11\106\1\107\17\106" +
          "\3\31\1\0\11\31\14\0\11\12\1\110\17\12\3\32" +
          "\1\33\11\32\14\0\46\33\14\0\3\12\1\57\5\12" +
          "\1\110\17\12\3\32\1\33\2\32\1\111\6\32\14\0" +
          "\11\12\1\110\2\12\1\60\14\12\3\32\1\33\5\32" +
          "\1\112\3\32\14\0\7\12\1\113\1\12\1\110\17\12" +
          "\3\32\1\33\11\32\6\0\3\114\1\115\50\114\1\116" +
          "\5\114\3\117\1\115\51\117\1\120\4\117\6\0\2\12" +
          "\1\121\6\12\1\47\22\12\1\33\11\12\14\0\7\12" +
          "\1\122\1\12\1\47\22\12\1\33\11\12\14\0\14\33" +
          "\1\123\31\33\14\0\11\12\1\47\6\12\1\124\1\12" +
          "\1\125\11\12\1\33\11\12\14\0\6\12\1\126\2\12" +
          "\1\47\22\12\1\33\11\12\14\0\11\12\1\47\11\12" +
          "\1\127\10\12\1\33\11\12\14\0\6\12\1\130\2\12" +
          "\1\47\7\12\1\131\12\12\1\33\11\12\14\0\11\12" +
          "\1\47\4\12\1\132\15\12\1\33\11\12\14\0\2\12" +
          "\1\133\6\12\1\47\1\12\1\134\20\12\1\33\11\12" +
          "\14\0\11\12\1\47\7\12\1\135\12\12\1\33\11\12" +
          "\14\0\4\12\1\136\4\12\1\47\22\12\1\33\11\12" +
          "\14\0\5\12\1\137\3\12\1\47\22\12\1\33\11\12" +
          "\14\0\11\12\1\47\6\12\1\140\13\12\1\33\11\12" +
          "\14\0\11\12\1\47\10\12\1\141\11\12\1\33\11\12" +
          "\14\0\2\12\1\142\6\12\1\47\3\12\1\143\16\12" +
          "\1\33\11\12\14\0\11\12\1\47\3\12\1\144\16\12" +
          "\1\33\11\12\14\0\3\12\1\145\5\12\1\47\22\12" +
          "\1\33\11\12\14\0\11\12\1\47\7\12\1\146\12\12" +
          "\1\33\11\12\14\0\11\12\1\47\11\12\1\147\10\12" +
          "\1\33\11\12\14\0\11\12\1\47\10\12\1\150\11\12" +
          "\1\33\11\12\14\0\5\33\1\151\2\33\1\152\3\33" +
          "\1\123\1\33\1\153\27\33\14\0\2\12\1\154\6\12" +
          "\1\47\22\12\1\33\11\12\14\0\2\12\1\155\6\12" +
          "\1\47\22\12\1\33\11\12\14\0\11\12\1\47\12\12" +
          "\1\156\7\12\1\33\11\12\14\0\11\12\1\47\6\12" +
          "\1\157\13\12\1\33\11\12\14\0\4\12\1\160\4\12" +
          "\1\47\22\12\1\33\11\12\14\0\7\12\1\161\1\12" +
          "\1\47\22\12\1\33\11\12\14\0\1\12\1\162\5\12" +
          "\1\163\1\12\1\47\22\12\1\33\11\12\14\0\11\12" +
          "\1\47\6\12\1\164\13\12\1\33\11\12\14\0\10\12" +
          "\1\165\1\47\22\12\1\33\11\12\14\0\11\12\1\47" +
          "\5\12\1\166\14\12\1\33\11\12\14\0\11\12\1\47" +
          "\14\12\1\167\5\12\1\33\11\12\14\0\11\12\1\47" +
          "\7\12\1\170\12\12\1\33\11\12\14\0\11\106\1\171" +
          "\22\106\1\0\11\106\25\0\1\172\2\0\1\173\14\0" +
          "\3\172\1\0\11\172\14\0\11\33\1\15\2\33\1\123" +
          "\14\33\3\15\1\33\11\15\14\0\11\12\1\110\17\12" +
          "\3\32\1\33\3\32\1\174\5\32\14\0\11\12\1\110" +
          "\17\12\3\32\1\33\6\32\1\175\2\32\14\0\2\12" +
          "\1\176\6\12\1\47\22\12\1\33\11\12\6\0\3\114" +
          "\1\115\50\114\1\115\5\114\54\0\1\177\5\0\3\117" +
          "\1\115\51\117\1\115\4\117\55\0\1\200\12\0\3\12" +
          "\1\201\5\12\1\202\22\12\1\33\11\12\14\0\11\12" +
          "\1\47\4\12\1\203\15\12\1\33\11\12\14\0\2\33" +
          "\1\204\43\33\14\0\5\12\1\205\3\12\1\47\22\12" +
          "\1\33\11\12\14\0\7\12\1\206\1\12\1\47\22\12" +
          "\1\33\11\12\14\0\1\12\1\145\7\12\1\47\22\12" +
          "\1\33\11\12\14\0\11\12\1\207\22\12\1\33\11\12" +
          "\14\0\7\12\1\210\1\12\1\47\22\12\1\33\11\12" +
          "\14\0\7\12\1\211\1\12\1\47\22\12\1\33\11\12" +
          "\14\0\7\12\1\212\1\12\1\47\22\12\1\33\11\12" +
          "\14\0\11\12\1\47\1\12\1\213\20\12\1\33\11\12" +
          "\14\0\2\12\1\145\6\12\1\47\22\12\1\33\11\12" +
          "\14\0\10\12\1\214\1\47\22\12\1\33\11\12\14\0" +
          "\1\12\1\215\7\12\1\47\22\12\1\33\11\12\14\0" +
          "\11\12\1\47\7\12\1\136\12\12\1\33\11\12\14\0" +
          "\5\12\1\216\3\12\1\47\22\12\1\33\11\12\14\0" +
          "\7\12\1\217\1\12\1\47\22\12\1\33\11\12\14\0" +
          "\7\12\1\220\1\12\1\47\22\12\1\33\11\12\14\0" +
          "\3\12\1\221\5\12\1\47\22\12\1\33\11\12\14\0" +
          "\5\12\1\145\3\12\1\47\22\12\1\33\11\12\14\0" +
          "\1\12\1\222\7\12\1\47\22\12\1\33\11\12\14\0" +
          "\11\12\1\223\22\12\1\33\11\12\14\0\11\12\1\47" +
          "\7\12\1\145\12\12\1\33\11\12\14\0\13\33\1\224" +
          "\32\33\14\0\1\33\1\225\44\33\14\0\13\33\1\226" +
          "\32\33\14\0\11\12\1\47\2\12\1\227\17\12\1\33" +
          "\11\12\14\0\10\12\1\230\1\47\22\12\1\33\11\12" +
          "\14\0\11\12\1\71\22\12\1\33\11\12\14\0\11\12" +
          "\1\231\7\12\1\145\12\12\1\33\11\12\14\0\3\12" +
          "\1\232\5\12\1\47\22\12\1\33\11\12\14\0\3\12" +
          "\1\126\5\12\1\47\22\12\1\33\11\12\14\0\11\12" +
          "\1\47\4\12\1\233\15\12\1\33\11\12\14\0\1\234" +
          "\10\12\1\47\10\12\1\235\2\12\1\236\6\12\1\33" +
          "\11\12\14\0\11\12\1\47\11\12\1\237\10\12\1\33" +
          "\11\12\14\0\11\12\1\47\15\12\1\240\4\12\1\33" +
          "\11\12\14\0\11\12\1\47\7\12\1\241\12\12\1\33" +
          "\11\12\14\0\11\12\1\47\2\12\1\242\17\12\1\33" +
          "\11\12\14\0\11\12\1\47\1\12\1\243\20\12\1\33" +
          "\11\12\30\0\1\173\56\0\1\172\17\0\3\172\1\0" +
          "\11\172\16\0\1\244\57\0\11\12\1\110\17\12\3\32" +
          "\1\33\4\32\1\245\4\32\14\0\11\12\1\110\17\12" +
          "\3\32\1\33\7\32\1\174\1\32\14\0\1\12\1\246" +
          "\7\12\1\47\22\12\1\33\11\12\6\0\54\177\1\247" +
          "\5\177\55\200\1\250\4\200\6\0\4\12\1\251\4\12" +
          "\1\47\22\12\1\33\11\12\14\0\14\33\1\252\31\33" +
          "\14\0\15\33\1\253\30\33\14\0\4\12\1\254\4\12" +
          "\1\47\22\12\1\33\11\12\14\0\3\12\1\255\5\12" +
          "\1\47\22\12\1\33\11\12\14\0\5\33\1\151\6\33" +
          "\1\123\31\33\14\0\10\12\1\256\1\47\22\12\1\33" +
          "\11\12\14\0\4\12\1\257\4\12\1\47\22\12\1\33" +
          "\11\12\14\0\5\12\1\260\3\12\1\47\22\12\1\33" +
          "\11\12\14\0\11\12\1\47\1\261\21\12\1\33\11\12" +
          "\14\0\11\12\1\262\22\12\1\33\11\12\14\0\4\12" +
          "\1\263\4\12\1\47\22\12\1\33\11\12\14\0\3\12" +
          "\1\264\5\12\1\47\22\12\1\33\11\12\14\0\10\12" +
          "\1\265\1\47\22\12\1\33\11\12\14\0\7\12\1\266" +
          "\1\12\1\47\22\12\1\33\11\12\14\0\10\12\1\150" +
          "\1\47\22\12\1\33\11\12\14\0\1\267\13\33\1\123" +
          "\31\33\14\0\16\33\1\270\27\33\14\0\21\33\1\271" +
          "\24\33\14\0\2\33\1\272\43\33\14\0\3\12\1\273" +
          "\5\12\1\47\22\12\1\33\11\12\14\0\11\12\1\47" +
          "\2\12\1\274\17\12\1\33\11\12\14\0\3\33\1\275" +
          "\4\33\1\276\3\33\1\123\31\33\14\0\11\12\1\47" +
          "\6\12\1\277\13\12\1\33\11\12\14\0\4\12\1\300" +
          "\4\12\1\47\22\12\1\33\11\12\14\0\4\12\1\301" +
          "\4\12\1\47\22\12\1\33\11\12\14\0\1\12\1\302" +
          "\7\12\1\47\22\12\1\33\11\12\14\0\1\12\1\303" +
          "\7\12\1\47\22\12\1\33\11\12\14\0\11\12\1\47" +
          "\2\12\1\304\17\12\1\33\11\12\14\0\7\12\1\305" +
          "\1\12\1\47\22\12\1\33\11\12\14\0\10\12\1\306" +
          "\1\47\22\12\1\33\11\12\14\0\11\12\1\71\3\12" +
          "\1\307\13\12\1\310\2\12\1\33\11\12\14\0\11\12" +
          "\1\47\4\12\1\311\15\12\1\33\11\12\31\0\1\312" +
          "\36\0\54\177\1\313\5\177\55\200\1\314\4\200\6\0" +
          "\5\12\1\315\3\12\1\47\22\12\1\33\11\12\14\0" +
          "\2\33\1\204\10\33\1\316\32\33\14\0\3\33\1\317" +
          "\42\33\14\0\11\12\1\47\3\12\1\320\16\12\1\33" +
          "\11\12\14\0\10\12\1\321\1\47\22\12\1\33\11\12" +
          "\14\0\1\12\1\322\7\12\1\47\22\12\1\33\11\12" +
          "\14\0\3\12\1\323\5\12\1\47\22\12\1\33\11\12" +
          "\14\0\1\12\1\324\7\12\1\47\22\12\1\33\11\12" +
          "\14\0\1\12\1\325\7\12\1\47\22\12\1\33\11\12" +
          "\14\0\5\33\1\326\6\33\1\123\31\33\14\0\11\12" +
          "\1\47\3\12\1\327\16\12\1\33\11\12\14\0\10\12" +
          "\1\330\1\47\22\12\1\33\11\12\14\0\11\12\1\47" +
          "\2\12\1\331\17\12\1\33\11\12\14\0\11\12\1\47" +
          "\1\12\1\332\20\12\1\33\11\12\14\0\1\33\1\333" +
          "\44\33\14\0\3\33\1\272\42\33\14\0\10\33\1\334" +
          "\35\33\14\0\14\33\1\335\31\33\14\0\11\12\1\47" +
          "\5\12\1\336\14\12\1\33\11\12\14\0\11\12\1\47" +
          "\6\12\1\222\13\12\1\33\11\12\14\0\7\33\1\337" +
          "\36\33\14\0\14\33\1\340\31\33\14\0\1\12\1\341" +
          "\7\12\1\47\22\12\1\33\11\12\14\0\11\12\1\47" +
          "\1\12\1\342\20\12\1\33\11\12\14\0\11\12\1\47" +
          "\2\12\1\343\17\12\1\33\11\12\14\0\3\12\1\344" +
          "\5\12\1\47\22\12\1\33\11\12\14\0\11\12\1\47" +
          "\6\12\1\345\13\12\1\33\11\12\14\0\1\346\10\12" +
          "\1\47\22\12\1\33\11\12\14\0\2\12\1\156\6\12" +
          "\1\47\22\12\1\33\11\12\14\0\7\12\1\347\1\12" +
          "\1\47\22\12\1\33\11\12\14\0\7\12\1\350\1\12" +
          "\1\47\22\12\1\33\11\12\14\0\11\12\1\351\22\12" +
          "\1\33\11\12\14\0\11\12\1\47\1\12\1\352\20\12" +
          "\1\33\11\12\17\0\1\353\50\0\54\177\1\115\5\177" +
          "\55\200\1\115\4\200\6\0\1\12\1\203\7\12\1\47" +
          "\22\12\1\33\11\12\14\0\15\33\1\354\30\33\14\0" +
          "\7\33\1\355\36\33\14\0\1\12\1\150\7\12\1\47" +
          "\22\12\1\33\11\12\14\0\1\12\1\356\7\12\1\47" +
          "\22\12\1\33\11\12\14\0\11\12\1\357\22\12\1\33" +
          "\11\12\14\0\11\12\1\47\6\12\1\320\13\12\1\33" +
          "\11\12\14\0\11\12\1\47\6\12\1\360\13\12\1\33" +
          "\11\12\14\0\11\12\1\47\7\12\1\361\12\12\1\33" +
          "\11\12\14\0\13\33\1\362\32\33\14\0\1\12\1\363" +
          "\7\12\1\47\22\12\1\33\11\12\14\0\11\12\1\364" +
          "\22\12\1\33\11\12\14\0\10\12\1\365\1\47\22\12" +
          "\1\33\11\12\14\0\11\12\1\47\3\12\1\366\16\12" +
          "\1\33\11\12\14\0\2\33\1\367\43\33\14\0\3\33" +
          "\1\370\42\33\14\0\11\12\1\371\22\12\1\33\11\12" +
          "\14\0\7\33\1\372\36\33\14\0\3\33\1\373\42\33" +
          "\14\0\11\12\1\374\22\12\1\33\11\12\14\0\5\12" +
          "\1\375\3\12\1\47\22\12\1\33\11\12\14\0\3\12" +
          "\1\376\5\12\1\47\22\12\1\33\11\12\14\0\10\12" +
          "\1\377\1\47\22\12\1\33\11\12\14\0\10\12\1\u0100" +
          "\1\47\22\12\1\33\11\12\14\0\1\12\1\u0101\7\12" +
          "\1\47\22\12\1\33\11\12\14\0\3\12\1\315\5\12" +
          "\1\47\22\12\1\33\11\12\14\0\11\12\1\47\6\12" +
          "\1\u0102\13\12\1\33\11\12\14\0\14\33\1\123\4\33" +
          "\1\u0103\24\33\14\0\5\12\1\u0104\3\12\1\47\22\12" +
          "\1\33\11\12\23\0\1\u0105\52\0\5\33\1\334\40\33" +
          "\14\0\13\33\1\u0106\32\33\14\0\11\12\1\47\3\12" +
          "\1\u0107\16\12\1\33\11\12\14\0\12\33\1\u0108\1\33" +
          "\1\123\31\33\14\0\10\12\1\u0109\1\47\22\12\1\33" +
          "\11\12\14\0\10\12\1\145\1\47\22\12\1\33\11\12" +
          "\14\0\16\33\1\u010a\27\33\14\0\11\12\1\u010b\22\12" +
          "\1\33\11\12\14\0\14\33\1\123\5\33\1\u010c\23\33" +
          "\14\0\11\12\1\47\1\12\1\u010d\20\12\1\33\11\12" +
          "\14\0\11\12\1\u010e\22\12\1\33\11\12\14\0\3\33" +
          "\1\u010f\42\33\14\0\17\33\1\334\26\33\14\0\14\33" +
          "\1\123\10\33\1\u0110\20\33\14\0\10\33\1\u0111\35\33" +
          "\14\0\1\u0112\45\33\14\0\4\33\1\u0113\7\33\1\123" +
          "\10\33\1\u0110\20\33\14\0\10\12\1\u0114\1\47\22\12" +
          "\1\33\11\12\14\0\11\12\1\47\3\12\1\u0115\16\12" +
          "\1\33\11\12\14\0\11\12\1\47\1\12\1\320\20\12" +
          "\1\33\11\12\14\0\11\12\1\u0116\22\12\1\33\11\12" +
          "\14\0\11\12\1\u0117\22\12\1\33\11\12\14\0\11\12" +
          "\1\u0118\22\12\1\33\11\12\14\0\4\33\1\u0119\41\33" +
          "\14\0\11\12\1\47\1\12\1\u011a\20\12\1\33\11\12" +
          "\27\0\1\u011b\46\0\15\33\1\u011c\30\33\14\0\11\12" +
          "\1\u011d\22\12\1\33\11\12\14\0\13\33\1\u011e\32\33" +
          "\14\0\3\12\1\u011f\5\12\1\47\22\12\1\33\11\12" +
          "\14\0\3\33\1\u0120\42\33\14\0\14\33\1\123\1\u0121" +
          "\30\33\14\0\14\33\1\u0122\31\33\14\0\7\12\1\u0123" +
          "\1\12\1\47\22\12\1\33\11\12\14\0\3\33\1\u0124" +
          "\1\33\1\151\1\u0125\5\33\1\u0126\1\33\1\u0127\3\33" +
          "\1\u0128\23\33\14\0\4\33\1\u011e\41\33\14\0\14\33" +
          "\1\u0129\31\33\14\0\21\33\1\u012a\24\33\14\0\1\33" +
          "\1\u012b\44\33\14\0\2\33\1\u012c\43\33\14\0\11\12" +
          "\1\u012d\22\12\1\33\11\12\14\0\11\12\1\u012e\22\12" +
          "\1\33\11\12\14\0\14\33\1\123\3\33\1\u012f\25\33" +
          "\14\0\10\33\1\u0130\3\33\1\123\31\33\14\0\4\33" +
          "\1\u0131\7\33\1\123\31\33\14\0\22\33\1\u0132\23\33" +
          "\14\0\10\12\1\u0133\1\47\22\12\1\33\11\12\31\0" +
          "\1\u0134\44\0\11\33\1\u0135\34\33\14\0\14\33\1\123" +
          "\1\u0136\30\33\14\0\5\33\1\u0137\40\33\14\0\11\12" +
          "\1\47\1\12\1\u0138\20\12\1\33\11\12\14\0\14\33" +
          "\1\u0139\31\33\14\0\1\33\1\u013a\44\33\14\0\10\33" +
          "\1\u013b\35\33\14\0\2\12\1\u013c\6\12\1\47\22\12" +
          "\1\33\11\12\14\0\1\33\1\u013d\44\33\14\0\14\33" +
          "\1\u013e\31\33\14\0\2\33\1\204\11\33\1\u013f\31\33" +
          "\14\0\4\33\1\u0140\6\33\1\226\32\33\14\0\3\33" +
          "\1\u0141\42\33\14\0\3\33\1\u012a\42\33\14\0\10\33" +
          "\1\u012a\35\33\14\0\15\33\1\u0142\30\33\14\0\2\33" +
          "\1\u0143\11\33\1\123\5\33\1\u0144\2\33\1\u0145\20\33" +
          "\14\0\14\33\1\123\3\33\1\u0146\25\33\14\0\7\33" +
          "\1\u0147\36\33\14\0\17\33\1\u0148\26\33\14\0\3\33" +
          "\1\u0149\42\33\14\0\22\33\1\u014a\23\33\14\0\11\12" +
          "\1\47\5\12\1\145\14\12\1\33\11\12\25\0\1\u014b" +
          "\50\0\5\33\1\151\40\33\14\0\1\33\1\u014c\44\33" +
          "\14\0\1\33\1\334\44\33\14\0\11\12\1\47\6\12" +
          "\1\u014d\13\12\1\33\11\12\14\0\3\33\1\u014e\42\33" +
          "\14\0\12\33\1\u014f\33\33\14\0\27\33\1\u012a\16\33" +
          "\14\0\11\12\1\u0150\22\12\1\33\11\12\14\0\21\33" +
          "\1\u0151\24\33\14\0\2\33\1\u0152\43\33\14\0\3\33" +
          "\1\334\42\33\14\0\13\33\1\u0153\32\33\14\0\1\33" +
          "\1\u0154\44\33\14\0\1\33\1\u0155\44\33\14\0\14\33" +
          "\1\u0156\31\33\14\0\17\33\1\u0157\26\33\14\0\14\33" +
          "\1\u013f\31\33\14\0\7\33\1\u0158\36\33\14\0\2\33" +
          "\1\u0159\43\33\14\0\22\33\1\u015a\23\33\14\0\5\33" +
          "\1\u012a\40\33\14\0\7\33\1\u015b\36\33\21\0\1\u015c" +
          "\54\0\22\33\1\u0111\23\33\14\0\11\12\1\u015d\22\12" +
          "\1\33\11\12\14\0\17\33\1\u015e\26\33\14\0\21\33" +
          "\1\334\24\33\14\0\14\33\1\123\5\33\1\u015f\23\33" +
          "\14\0\7\33\1\u0160\36\33\14\0\13\33\1\u0161\32\33" +
          "\14\0\5\33\1\u0162\40\33\14\0\16\33\1\u0163\27\33" +
          "\14\0\3\33\1\u0164\42\33\14\0\10\33\1\u0165\35\33" +
          "\14\0\10\33\1\u0166\35\33\14\0\2\33\1\u0167\43\33" +
          "\14\0\12\33\1\u0168\33\33\14\0\1\33\1\u012a\44\33" +
          "\14\0\3\33\1\u012b\42\33\27\0\1\u0169\46\0\10\33" +
          "\1\152\3\33\1\123\31\33\14\0\11\33\1\u016a\34\33" +
          "\14\0\3\33\1\u016b\42\33\14\0\4\33\1\u016c\41\33" +
          "\14\0\12\33\1\152\33\33\14\0\15\33\1\u016d\30\33" +
          "\14\0\4\33\1\u016e\41\33\14\0\11\33\1\u016f\34\33" +
          "\14\0\13\33\1\u0170\32\33\14\0\27\33\1\u0171\16\33" +
          "\14\0\12\33\1\u0172\33\33\14\0\13\33\1\u0173\32\33" +
          "\32\0\1\u0174\43\0\22\33\1\u0175\23\33\14\0\7\33" +
          "\1\u0176\36\33\14\0\3\33\1\u0177\42\33\14\0\11\33" +
          "\1\u0178\34\33\14\0\13\33\1\u0179\32\33\14\0\10\33" +
          "\1\u017a\35\33\14\0\26\33\1\u017b\17\33\14\0\7\33" +
          "\1\u017c\36\33\14\0\13\33\1\u017d\32\33\14\0\1\334" +
          "\45\33\17\0\1\u017e\56\0\3\33\1\u017f\42\33\14\0" +
          "\20\33\1\u0180\25\33\14\0\20\33\1\u0137\25\33\14\0" +
          "\20\33\1\u012f\25\33\14\0\5\33\1\u0181\40\33\14\0" +
          "\1\33\1\u0182\44\33\14\0\1\33\1\u011c\44\33\14\0" +
          "\2\33\1\u011c\43\33\14\0\1\u012a\45\33\30\0\1\u0183" +
          "\45\0\7\33\1\u0184\36\33\14\0\1\33\1\u0185\44\33" +
          "\14\0\10\33\1\u0186\35\33\14\0\21\33\1\u012b\24\33" +
          "\17\0\1\u0187\56\0\25\33\1\u0188\20\33\14\0\21\33" +
          "\1\u0189\24\33\14\0\11\33\1\u018a\34\33\33\0\1\u018b" +
          "\42\0\1\33\1\u018c\44\33\14\0\21\33\1\u018d\24\33" +
          "\14\0\14\33\1\u0145\31\33\14\0\20\33\1\u018e\25\33" +
          "\14\0\7\33\1\u018f\36\33\14\0\10\33\1\u0190\35\33" +
          "\14\0\3\33\1\u0191\42\33\14\0\11\33\1\u0192\34\33" +
          "\14\0\11\33\1\u0193\7\33\1\u012a\24\33\14\0\15\33" +
          "\1\u0194\30\33\14\0\15\33\1\u0136\30\33\14\0\13\33" +
          "\1\u0129\32\33\6\0";

  private static int[] zzUnpackTrans() {
    int[] result = new int[19500];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int[] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
      "Unkown internal scanner error",
      "Error: could not match input",
      "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
      "\1\0\1\11\2\1\1\11\33\1\4\11\41\1\1\0" +
          "\6\1\1\11\53\1\1\0\1\1\1\0\3\1\2\0" +
          "\43\1\1\0\2\1\2\0\41\1\3\0\36\1\1\0" +
          "\31\1\1\0\25\1\1\0\30\1\1\0\26\1\1\0" +
          "\20\1\1\0\14\1\1\0\12\1\1\0\11\1\1\0" +
          "\4\1\1\0\3\1\1\0\3\1\1\11\11\1";

  private static int[] zzUnpackAttribute() {
    int[] result = new int[404];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int[] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * the current state of the DFA
   */
  private int zzState;

  /**
   * the current lexical state
   */
  private int zzLexicalState = YYINITIAL;

  /**
   * this buffer contains the current text to be matched and is
   * the source of the yytext() string
   */
  private CharSequence zzBuffer = "";

  /**
   * this buffer may contains the current text array to be matched when it is cheap to acquire it
   */
  private char[] zzBufferArray;

  /**
   * the textposition at the last accepting state
   */
  private int zzMarkedPos;

  /**
   * the textposition at the last state to be included in yytext
   */
  private int zzPushbackPos;

  /**
   * the current text position in the buffer
   */
  private int zzCurrentPos;

  /**
   * startRead marks the beginning of the yytext() string in the buffer
   */
  private int zzStartRead;

  /**
   * endRead marks the last character in the buffer, that has been read
   * from input
   */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /**
   * zzAtEOF == true <=> the scanner is at the EOF
   */
  private boolean zzAtEOF;

  /**
   * denotes if the user-EOF-code has already been executed
   */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param in the java.io.Reader to read input from.
   */
  public _BuckLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed the packed character translation table
   * @return the unpacked character translation table
   */
  private static char[] zzUnpackCMap(String packed) {
    char[] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1624) {
      int count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return <code>false</code>, iff there was new input.
   * @throws java.io.IOException if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   * <p/>
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead + pos] : zzBuffer.charAt(zzStartRead + pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos - zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   * <p/>
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   * <p/>
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param errorCode the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   * <p/>
   * They will be read again by then next call of the scanning method
   *
   * @param number the number of characters to be read again.
   *               This number must not be greater than yylength()!
   */
  public void yypushback(int number) {
    if (number > yylength())
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return the next token
   * @throws java.io.IOException if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char[] zzCMapL = ZZ_CMAP;

    int[] zzTransL = ZZ_TRANS;
    int[] zzRowMapL = ZZ_ROWMAP;
    int[] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction:
      {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          } else {
            // store back cached positions
            zzCurrentPos = zzCurrentPosL;
            zzMarkedPos = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL = zzCurrentPos;
            zzMarkedPosL = zzMarkedPos;
            zzBufferL = zzBuffer;
            zzEndReadL = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            } else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ((zzAttributes & 1) == 1) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ((zzAttributes & 8) == 8) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 6: {
          return VALUE_STRING;
        }
        case 15:
          break;
        case 8: {
          return RBRACE;
        }
        case 16:
          break;
        case 4: {
          return EQUAL;
        }
        case 17:
          break;
        case 3: {
          return COMMENT;
        }
        case 18:
          break;
        case 9: {
          return COMMA;
        }
        case 19:
          break;
        case 12: {
          return RULE_NAMES;
        }
        case 20:
          break;
        case 11: {
          return KEYWORDS;
        }
        case 21:
          break;
        case 1: {
          return IDENTIFIER;
        }
        case 22:
          break;
        case 13: {
          return VALUE_BOOLEAN;
        }
        case 23:
          break;
        case 10: {
          return SEMICOLON;
        }
        case 24:
          break;
        case 14: {
          return VALUE_NONE;
        }
        case 25:
          break;
        case 2: {
          return TokenType.WHITE_SPACE;
        }
        case 26:
          break;
        case 7: {
          return LBRACE;
        }
        case 27:
          break;
        case 5: {
          return MACROS;
        }
        case 28:
          break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          } else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
