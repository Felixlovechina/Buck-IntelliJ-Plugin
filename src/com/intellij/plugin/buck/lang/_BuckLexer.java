/* The following code was generated by JFlex 1.4.3 on 6/22/15 9:30 PM */

package com.intellij.plugin.buck.lang;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import com.intellij.plugin.buck.lang.psi.BuckTypes;
import java.util.LinkedList;
import java.util.HashSet;
import java.util.Set;
import java.lang.String;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 6/22/15 9:30 PM from the specification file
 * <tt>/Users/cjlm/Projects/buck_plugin/src/com/intellij/plugin/buck/lang/Buck.flex</tt>
 */
public class _BuckLexer implements FlexLexer, BuckTypes {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int WAITING_VALUE = 2;
  public static final int SINGLE_QUOTE_STRING = 6;
  public static final int YYINITIAL = 0;
  public static final int DOUBLE_QUOTE_STRING = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  0,  0,  0,  0,  0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\1\1\0\1\3\1\2\22\0\1\3\1\0\1\55"+
    "\1\5\3\0\1\54\1\56\1\56\2\0\1\57\3\0\7\42\1\40"+
    "\2\42\1\0\1\60\1\0\1\6\3\0\1\51\3\41\1\50\1\45"+
    "\5\41\1\52\5\41\1\46\1\53\1\44\1\47\5\41\1\56\1\4"+
    "\1\56\1\0\1\20\1\0\1\23\1\25\1\27\1\24\1\10\1\21"+
    "\1\7\1\36\1\22\1\34\1\32\1\14\1\15\1\11\1\16\1\31"+
    "\1\37\1\12\1\30\1\17\1\13\1\35\1\37\1\33\1\26\1\37"+
    "\1\56\1\0\1\56\54\0\1\43\12\0\1\43\4\0\1\43\5\0"+
    "\27\43\1\0\37\43\1\0\u01ca\43\4\0\14\43\16\0\5\43\7\0"+
    "\1\43\1\0\1\43\201\0\5\43\1\0\2\43\2\0\4\43\10\0"+
    "\1\43\1\0\3\43\1\0\1\43\1\0\24\43\1\0\123\43\1\0"+
    "\213\43\10\0\236\43\11\0\46\43\2\0\1\43\7\0\47\43\110\0"+
    "\33\43\5\0\3\43\55\0\53\43\43\0\2\43\1\0\143\43\1\0"+
    "\1\43\17\0\2\43\7\0\2\43\12\0\3\43\2\0\1\43\20\0"+
    "\1\43\1\0\36\43\35\0\131\43\13\0\1\43\30\0\41\43\11\0"+
    "\2\43\4\0\1\43\5\0\26\43\4\0\1\43\11\0\1\43\3\0"+
    "\1\43\27\0\31\43\107\0\1\43\1\0\13\43\127\0\66\43\3\0"+
    "\1\43\22\0\1\43\7\0\12\43\17\0\7\43\1\0\7\43\5\0"+
    "\10\43\2\0\2\43\2\0\26\43\1\0\7\43\1\0\1\43\3\0"+
    "\4\43\3\0\1\43\20\0\1\43\15\0\2\43\1\0\3\43\16\0"+
    "\2\43\23\0\6\43\4\0\2\43\2\0\26\43\1\0\7\43\1\0"+
    "\2\43\1\0\2\43\1\0\2\43\37\0\4\43\1\0\1\43\23\0"+
    "\3\43\20\0\11\43\1\0\3\43\1\0\26\43\1\0\7\43\1\0"+
    "\2\43\1\0\5\43\3\0\1\43\22\0\1\43\17\0\2\43\43\0"+
    "\10\43\2\0\2\43\2\0\26\43\1\0\7\43\1\0\2\43\1\0"+
    "\5\43\3\0\1\43\36\0\2\43\1\0\3\43\17\0\1\43\21\0"+
    "\1\43\1\0\6\43\3\0\3\43\1\0\4\43\3\0\2\43\1\0"+
    "\1\43\1\0\2\43\3\0\2\43\3\0\3\43\3\0\14\43\26\0"+
    "\1\43\64\0\10\43\1\0\3\43\1\0\27\43\1\0\12\43\1\0"+
    "\5\43\3\0\1\43\32\0\2\43\6\0\2\43\43\0\10\43\1\0"+
    "\3\43\1\0\27\43\1\0\12\43\1\0\5\43\3\0\1\43\40\0"+
    "\1\43\1\0\2\43\17\0\2\43\22\0\10\43\1\0\3\43\1\0"+
    "\51\43\2\0\1\43\20\0\1\43\21\0\2\43\30\0\6\43\5\0"+
    "\22\43\3\0\30\43\1\0\11\43\1\0\1\43\2\0\7\43\72\0"+
    "\60\43\1\0\2\43\14\0\7\43\72\0\2\43\1\0\1\43\2\0"+
    "\2\43\1\0\1\43\2\0\1\43\6\0\4\43\1\0\7\43\1\0"+
    "\3\43\1\0\1\43\1\0\1\43\2\0\2\43\1\0\4\43\1\0"+
    "\2\43\11\0\1\43\2\0\5\43\1\0\1\43\25\0\4\43\40\0"+
    "\1\43\77\0\10\43\1\0\44\43\33\0\5\43\163\0\53\43\24\0"+
    "\1\43\20\0\6\43\4\0\4\43\3\0\1\43\3\0\2\43\7\0"+
    "\3\43\4\0\15\43\14\0\1\43\21\0\46\43\1\0\1\43\5\0"+
    "\1\43\2\0\53\43\1\0\u014d\43\1\0\4\43\2\0\7\43\1\0"+
    "\1\43\1\0\4\43\2\0\51\43\1\0\4\43\2\0\41\43\1\0"+
    "\4\43\2\0\7\43\1\0\1\43\1\0\4\43\2\0\17\43\1\0"+
    "\71\43\1\0\4\43\2\0\103\43\45\0\20\43\20\0\125\43\14\0"+
    "\u026c\43\2\0\21\43\1\0\32\43\5\0\113\43\25\0\15\43\1\0"+
    "\4\43\16\0\22\43\16\0\22\43\16\0\15\43\1\0\3\43\17\0"+
    "\64\43\43\0\1\43\4\0\1\43\103\0\130\43\10\0\51\43\1\0"+
    "\1\43\5\0\106\43\12\0\35\43\63\0\36\43\2\0\5\43\13\0"+
    "\54\43\25\0\7\43\70\0\27\43\11\0\65\43\122\0\1\43\135\0"+
    "\57\43\21\0\7\43\67\0\36\43\15\0\2\43\12\0\54\43\32\0"+
    "\44\43\51\0\3\43\12\0\44\43\153\0\4\43\1\0\4\43\3\0"+
    "\2\43\11\0\300\43\100\0\u0116\43\2\0\6\43\2\0\46\43\2\0"+
    "\6\43\2\0\10\43\1\0\1\43\1\0\1\43\1\0\1\43\1\0"+
    "\37\43\2\0\65\43\1\0\7\43\1\0\1\43\3\0\3\43\1\0"+
    "\7\43\3\0\4\43\2\0\6\43\4\0\15\43\5\0\3\43\1\0"+
    "\7\43\164\0\1\43\15\0\1\43\20\0\15\43\145\0\1\43\4\0"+
    "\1\43\2\0\12\43\1\0\1\43\3\0\5\43\6\0\1\43\1\0"+
    "\1\43\1\0\1\43\1\0\4\43\1\0\13\43\2\0\4\43\5\0"+
    "\5\43\4\0\1\43\64\0\2\43\u0a7b\0\57\43\1\0\57\43\1\0"+
    "\205\43\6\0\4\43\3\0\2\43\14\0\46\43\1\0\1\43\5\0"+
    "\1\43\2\0\70\43\7\0\1\43\20\0\27\43\11\0\7\43\1\0"+
    "\7\43\1\0\7\43\1\0\7\43\1\0\7\43\1\0\7\43\1\0"+
    "\7\43\1\0\7\43\120\0\1\43\u01d5\0\2\43\52\0\5\43\5\0"+
    "\2\43\4\0\126\43\6\0\3\43\1\0\132\43\1\0\4\43\5\0"+
    "\51\43\3\0\136\43\21\0\33\43\65\0\20\43\u0200\0\u19b6\43\112\0"+
    "\u51cd\43\63\0\u048d\43\103\0\56\43\2\0\u010d\43\3\0\20\43\12\0"+
    "\2\43\24\0\57\43\20\0\31\43\10\0\106\43\61\0\11\43\2\0"+
    "\147\43\2\0\4\43\1\0\4\43\14\0\13\43\115\0\12\43\1\0"+
    "\3\43\1\0\4\43\1\0\27\43\35\0\64\43\16\0\62\43\76\0"+
    "\6\43\3\0\1\43\16\0\34\43\12\0\27\43\31\0\35\43\7\0"+
    "\57\43\34\0\1\43\60\0\51\43\27\0\3\43\1\0\10\43\24\0"+
    "\27\43\3\0\1\43\5\0\60\43\1\0\1\43\3\0\2\43\2\0"+
    "\5\43\2\0\1\43\1\0\1\43\30\0\3\43\2\0\13\43\7\0"+
    "\3\43\14\0\6\43\2\0\6\43\2\0\6\43\11\0\7\43\1\0"+
    "\7\43\221\0\43\43\35\0\u2ba4\43\14\0\27\43\4\0\61\43\u2104\0"+
    "\u016e\43\2\0\152\43\46\0\7\43\14\0\5\43\5\0\1\43\1\0"+
    "\12\43\1\0\15\43\1\0\5\43\1\0\1\43\1\0\2\43\1\0"+
    "\2\43\1\0\154\43\41\0\u016b\43\22\0\100\43\2\0\66\43\50\0"+
    "\14\43\164\0\5\43\1\0\207\43\44\0\32\43\6\0\32\43\13\0"+
    "\131\43\3\0\6\43\2\0\6\43\2\0\6\43\2\0\3\43\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\7\1\1\6"+
    "\13\1\2\6\1\1\2\6\2\7\1\10\1\11\1\12"+
    "\37\1\1\0\4\6\5\7\10\1\1\13\10\1\1\13"+
    "\23\1\1\0\1\6\1\0\2\6\2\0\2\1\1\14"+
    "\11\1\1\15\23\1\1\0\1\15\2\0\35\1\3\0"+
    "\15\1\1\14\14\1\1\0\22\1\1\13\3\1\1\0"+
    "\22\1\1\0\14\1\1\13\10\1\1\0\23\1\1\0"+
    "\16\1\1\0\12\1\1\0\10\1\1\0\7\1\1\0"+
    "\3\1\1\0\2\1\1\0\2\1\1\14\5\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[358];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\61\0\142\0\223\0\304\0\61\0\365"+
    "\0\u0126\0\u0157\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d"+
    "\0\u02ae\0\u02df\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405"+
    "\0\u0436\0\u0467\0\u0498\0\u04c9\0\u04fa\0\u052b\0\u055c\0\u058d"+
    "\0\u05be\0\61\0\61\0\61\0\u05ef\0\u0620\0\u0651\0\u0682"+
    "\0\u06b3\0\u06e4\0\u0715\0\u0746\0\u0777\0\u07a8\0\u07d9\0\u080a"+
    "\0\u083b\0\u086c\0\u089d\0\u08ce\0\u08ff\0\u0930\0\u0961\0\u0992"+
    "\0\u09c3\0\u09f4\0\u0a25\0\u0a56\0\u0a87\0\u0ab8\0\u0ae9\0\u0b1a"+
    "\0\u0b4b\0\u0b7c\0\u0bad\0\u0bde\0\u0c0f\0\u0c40\0\u0c71\0\u0ca2"+
    "\0\u0cd3\0\61\0\u0d04\0\u0d35\0\u0d66\0\u0d97\0\u0dc8\0\u0df9"+
    "\0\u0e2a\0\u0e5b\0\u0e8c\0\u0ebd\0\u0eee\0\u0f1f\0\u0f50\0\u0f81"+
    "\0\u0fb2\0\u0fe3\0\u1014\0\u1045\0\u1076\0\u10a7\0\u01b9\0\u10d8"+
    "\0\u1109\0\u113a\0\u116b\0\u119c\0\u11cd\0\u11fe\0\u122f\0\u1260"+
    "\0\u1291\0\u12c2\0\u12f3\0\u1324\0\u1355\0\u1386\0\u13b7\0\u13e8"+
    "\0\u1419\0\u144a\0\u147b\0\u14ac\0\u14dd\0\u150e\0\u153f\0\u1570"+
    "\0\u15a1\0\u15d2\0\u1603\0\u01b9\0\u1634\0\u1665\0\u1696\0\u16c7"+
    "\0\u16f8\0\u1729\0\u175a\0\u178b\0\u17bc\0\u01b9\0\u17ed\0\u181e"+
    "\0\u184f\0\u1880\0\u18b1\0\u18e2\0\u1913\0\u1944\0\u1975\0\u19a6"+
    "\0\u19d7\0\u1a08\0\u1a39\0\u1a6a\0\u1a9b\0\u1acc\0\u1afd\0\u1b2e"+
    "\0\u1b5f\0\u1b90\0\u04c9\0\u1bc1\0\u1bf2\0\u1c23\0\u1c54\0\u1c85"+
    "\0\u1cb6\0\u1ce7\0\u1d18\0\u1d49\0\u1d7a\0\u1dab\0\u1ddc\0\u1e0d"+
    "\0\u1e3e\0\u1e6f\0\u1ea0\0\u1ed1\0\u1f02\0\u1f33\0\u1f64\0\u1f95"+
    "\0\u1fc6\0\u1ff7\0\u2028\0\u2059\0\u208a\0\u20bb\0\u20ec\0\u211d"+
    "\0\u214e\0\u217f\0\u21b0\0\u21e1\0\u2212\0\u2243\0\u2274\0\u22a5"+
    "\0\u22d6\0\u2307\0\u2338\0\u2369\0\u239a\0\u23cb\0\u23fc\0\u242d"+
    "\0\u245e\0\u248f\0\u04fa\0\u24c0\0\u24f1\0\u2522\0\u2553\0\u2584"+
    "\0\u25b5\0\u25e6\0\u2617\0\u2648\0\u2679\0\u26aa\0\u26db\0\u270c"+
    "\0\u273d\0\u276e\0\u279f\0\u27d0\0\u2801\0\u2832\0\u2863\0\u2894"+
    "\0\u28c5\0\u28f6\0\u2927\0\u2958\0\u2989\0\u29ba\0\u29eb\0\u2a1c"+
    "\0\u2a4d\0\u2a7e\0\u2aaf\0\u2ae0\0\u2b11\0\u2b42\0\u2b73\0\u2ba4"+
    "\0\u2bd5\0\u2c06\0\u2c37\0\u2c68\0\u2c99\0\u2cca\0\u2cfb\0\u2d2c"+
    "\0\u2d5d\0\u2d8e\0\u2dbf\0\u2df0\0\u2e21\0\u2e52\0\u2e83\0\u2eb4"+
    "\0\u2ee5\0\u2f16\0\u2f47\0\u2f78\0\u2fa9\0\u2fda\0\u300b\0\u303c"+
    "\0\u306d\0\u309e\0\u30cf\0\u3100\0\u3131\0\u3162\0\u04fa\0\u3193"+
    "\0\u31c4\0\u31f5\0\u3226\0\u3257\0\u3288\0\u32b9\0\u32ea\0\u331b"+
    "\0\u334c\0\u337d\0\u33ae\0\u33df\0\u3410\0\u3441\0\u3472\0\u34a3"+
    "\0\u34d4\0\u3505\0\u3536\0\u3567\0\u3598\0\u35c9\0\u35fa\0\u362b"+
    "\0\u365c\0\u368d\0\u36be\0\u36ef\0\u3720\0\u3751\0\u3782\0\u37b3"+
    "\0\u37e4\0\u3815\0\u3846\0\u3877\0\u38a8\0\u38d9\0\u390a\0\u393b"+
    "\0\u396c\0\u399d\0\u39ce\0\u39ff\0\u3a30\0\u3a61\0\u3a92\0\u3ac3"+
    "\0\u3af4\0\u3b25\0\u3b56\0\u3b87\0\u3bb8\0\u3be9\0\u3c1a\0\u3c4b"+
    "\0\u3c7c\0\u3cad\0\u3cde\0\u3d0f\0\u3d40\0\u3d71\0\u3da2\0\u3dd3"+
    "\0\u3e04\0\u3e35\0\u3e66\0\u3e97\0\u3ec8\0\u3ef9\0\u3f2a\0\u3f5b"+
    "\0\u3f8c\0\u3fbd\0\u3fee\0\u401f\0\u4050\0\u4081\0\u40b2\0\u40e3"+
    "\0\61\0\u4114\0\u4145\0\u4176\0\u41a7\0\u41d8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[358];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\2\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\2\14\1\15\1\14\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\14\1\25\1\26"+
    "\1\27\1\30\1\14\1\31\1\32\2\14\1\33\1\34"+
    "\1\33\1\35\1\36\1\37\6\34\1\40\1\41\1\42"+
    "\1\43\1\44\62\0\1\3\62\0\1\5\55\0\1\6"+
    "\2\0\56\6\7\0\1\14\1\45\3\14\1\46\3\14"+
    "\1\47\22\14\1\35\10\14\14\0\11\14\1\47\12\14"+
    "\1\50\7\14\1\35\10\14\14\0\11\14\1\47\2\14"+
    "\1\51\1\52\16\14\1\35\10\14\14\0\1\14\1\53"+
    "\5\14\1\54\1\14\1\47\22\14\1\35\10\14\14\0"+
    "\11\14\1\47\22\14\1\35\10\14\14\0\11\14\1\47"+
    "\2\14\1\55\17\14\1\35\10\14\14\0\1\14\1\56"+
    "\1\14\1\57\5\14\1\47\22\14\1\35\10\14\14\0"+
    "\11\35\1\17\17\35\3\17\1\35\10\17\14\0\11\14"+
    "\1\47\2\14\1\60\17\14\1\35\10\14\14\0\2\14"+
    "\1\61\6\14\1\47\22\14\1\35\10\14\14\0\2\14"+
    "\1\62\6\14\1\47\2\14\1\63\4\14\1\64\1\65"+
    "\11\14\1\35\10\14\14\0\1\14\1\66\7\14\1\67"+
    "\22\14\1\35\10\14\14\0\11\14\1\47\1\14\1\70"+
    "\20\14\1\35\10\14\14\0\7\14\1\71\1\14\1\47"+
    "\12\14\1\72\7\14\1\35\10\14\14\0\3\14\1\73"+
    "\3\14\1\74\1\75\1\47\22\14\1\35\10\14\14\0"+
    "\3\14\1\76\5\14\1\47\2\14\1\77\2\14\1\100"+
    "\14\14\1\35\10\14\14\0\1\14\1\101\7\14\1\47"+
    "\22\14\1\35\10\14\14\0\11\14\1\47\2\14\1\102"+
    "\17\14\1\35\10\14\14\0\11\14\1\47\1\14\1\103"+
    "\20\14\1\35\10\14\14\0\11\104\1\105\17\104\3\33"+
    "\1\0\10\33\14\0\11\14\1\106\17\14\3\34\1\35"+
    "\10\34\14\0\45\35\14\0\3\14\1\57\5\14\1\106"+
    "\17\14\3\34\1\35\2\34\1\107\5\34\14\0\11\14"+
    "\1\106\2\14\1\60\14\14\3\34\1\35\5\34\1\110"+
    "\2\34\5\0\4\111\1\112\47\111\1\113\4\111\4\114"+
    "\1\112\50\114\1\115\3\114\7\0\2\14\1\116\6\14"+
    "\1\47\22\14\1\35\10\14\14\0\7\14\1\117\1\14"+
    "\1\47\22\14\1\35\10\14\14\0\14\35\1\120\30\35"+
    "\14\0\11\14\1\47\6\14\1\121\1\14\1\122\11\14"+
    "\1\35\10\14\14\0\6\14\1\123\2\14\1\47\22\14"+
    "\1\35\10\14\14\0\11\14\1\47\11\14\1\124\10\14"+
    "\1\35\10\14\14\0\6\14\1\125\2\14\1\47\7\14"+
    "\1\126\12\14\1\35\10\14\14\0\11\14\1\47\4\14"+
    "\1\127\15\14\1\35\10\14\14\0\2\14\1\130\6\14"+
    "\1\47\1\14\1\131\20\14\1\35\10\14\14\0\11\14"+
    "\1\47\7\14\1\132\12\14\1\35\10\14\14\0\4\14"+
    "\1\133\4\14\1\47\22\14\1\35\10\14\14\0\5\14"+
    "\1\134\3\14\1\47\22\14\1\35\10\14\14\0\11\14"+
    "\1\47\6\14\1\135\13\14\1\35\10\14\14\0\11\14"+
    "\1\47\3\14\1\136\16\14\1\35\10\14\14\0\3\14"+
    "\1\137\5\14\1\47\22\14\1\35\10\14\14\0\11\14"+
    "\1\47\7\14\1\140\12\14\1\35\10\14\14\0\11\14"+
    "\1\47\11\14\1\141\10\14\1\35\10\14\14\0\11\14"+
    "\1\47\10\14\1\142\11\14\1\35\10\14\14\0\5\35"+
    "\1\143\2\35\1\144\3\35\1\120\1\35\1\145\26\35"+
    "\14\0\2\14\1\146\6\14\1\47\22\14\1\35\10\14"+
    "\14\0\2\14\1\147\6\14\1\47\22\14\1\35\10\14"+
    "\14\0\11\14\1\47\12\14\1\150\7\14\1\35\10\14"+
    "\14\0\11\14\1\47\6\14\1\151\13\14\1\35\10\14"+
    "\14\0\4\14\1\152\4\14\1\47\22\14\1\35\10\14"+
    "\14\0\7\14\1\153\1\14\1\47\22\14\1\35\10\14"+
    "\14\0\1\14\1\154\5\14\1\155\1\14\1\47\22\14"+
    "\1\35\10\14\14\0\11\14\1\47\6\14\1\156\13\14"+
    "\1\35\10\14\14\0\10\14\1\157\1\47\22\14\1\35"+
    "\10\14\14\0\11\14\1\47\5\14\1\160\14\14\1\35"+
    "\10\14\14\0\11\14\1\47\14\14\1\161\5\14\1\35"+
    "\10\14\14\0\11\14\1\47\7\14\1\162\12\14\1\35"+
    "\10\14\14\0\11\104\1\163\22\104\1\0\10\104\25\0"+
    "\1\164\2\0\1\165\14\0\3\164\1\0\10\164\14\0"+
    "\11\35\1\17\2\35\1\120\14\35\3\17\1\35\10\17"+
    "\14\0\11\14\1\106\17\14\3\34\1\35\3\34\1\166"+
    "\4\34\14\0\11\14\1\106\17\14\3\34\1\35\6\34"+
    "\1\167\1\34\5\0\4\111\1\112\47\111\1\112\4\111"+
    "\54\0\1\170\4\0\4\114\1\112\50\114\1\112\3\114"+
    "\55\0\1\171\12\0\3\14\1\172\5\14\1\173\22\14"+
    "\1\35\10\14\14\0\11\14\1\47\4\14\1\174\15\14"+
    "\1\35\10\14\14\0\2\35\1\175\42\35\14\0\5\14"+
    "\1\176\3\14\1\47\22\14\1\35\10\14\14\0\7\14"+
    "\1\177\1\14\1\47\22\14\1\35\10\14\14\0\1\14"+
    "\1\137\7\14\1\47\22\14\1\35\10\14\14\0\11\14"+
    "\1\200\22\14\1\35\10\14\14\0\7\14\1\201\1\14"+
    "\1\47\22\14\1\35\10\14\14\0\7\14\1\202\1\14"+
    "\1\47\22\14\1\35\10\14\14\0\7\14\1\203\1\14"+
    "\1\47\22\14\1\35\10\14\14\0\11\14\1\47\1\14"+
    "\1\204\20\14\1\35\10\14\14\0\2\14\1\137\6\14"+
    "\1\47\22\14\1\35\10\14\14\0\10\14\1\205\1\47"+
    "\22\14\1\35\10\14\14\0\1\14\1\206\7\14\1\47"+
    "\22\14\1\35\10\14\14\0\11\14\1\47\7\14\1\133"+
    "\12\14\1\35\10\14\14\0\5\14\1\207\3\14\1\47"+
    "\22\14\1\35\10\14\14\0\3\14\1\210\5\14\1\47"+
    "\22\14\1\35\10\14\14\0\1\14\1\211\7\14\1\47"+
    "\22\14\1\35\10\14\14\0\11\14\1\212\22\14\1\35"+
    "\10\14\14\0\11\14\1\47\7\14\1\137\12\14\1\35"+
    "\10\14\14\0\13\35\1\213\31\35\14\0\1\35\1\214"+
    "\43\35\14\0\13\35\1\215\31\35\14\0\11\14\1\47"+
    "\2\14\1\216\17\14\1\35\10\14\14\0\10\14\1\217"+
    "\1\47\22\14\1\35\10\14\14\0\11\14\1\67\22\14"+
    "\1\35\10\14\14\0\11\14\1\220\7\14\1\137\12\14"+
    "\1\35\10\14\14\0\3\14\1\221\5\14\1\47\22\14"+
    "\1\35\10\14\14\0\3\14\1\123\5\14\1\47\22\14"+
    "\1\35\10\14\14\0\11\14\1\47\4\14\1\222\15\14"+
    "\1\35\10\14\14\0\11\14\1\47\10\14\1\223\2\14"+
    "\1\224\6\14\1\35\10\14\14\0\11\14\1\47\11\14"+
    "\1\225\10\14\1\35\10\14\14\0\11\14\1\47\15\14"+
    "\1\226\4\14\1\35\10\14\14\0\11\14\1\47\7\14"+
    "\1\227\12\14\1\35\10\14\14\0\11\14\1\47\2\14"+
    "\1\230\17\14\1\35\10\14\14\0\11\14\1\47\1\14"+
    "\1\231\20\14\1\35\10\14\30\0\1\165\55\0\1\164"+
    "\17\0\3\164\1\0\10\164\16\0\1\232\56\0\11\14"+
    "\1\106\17\14\3\34\1\35\4\34\1\233\3\34\14\0"+
    "\11\14\1\106\17\14\3\34\1\35\7\34\1\166\5\0"+
    "\54\170\1\234\4\170\55\171\1\235\3\171\7\0\4\14"+
    "\1\236\4\14\1\47\22\14\1\35\10\14\14\0\14\35"+
    "\1\237\30\35\14\0\15\35\1\240\27\35\14\0\4\14"+
    "\1\241\4\14\1\47\22\14\1\35\10\14\14\0\3\14"+
    "\1\242\5\14\1\47\22\14\1\35\10\14\14\0\5\35"+
    "\1\143\6\35\1\120\30\35\14\0\10\14\1\243\1\47"+
    "\22\14\1\35\10\14\14\0\4\14\1\244\4\14\1\47"+
    "\22\14\1\35\10\14\14\0\5\14\1\245\3\14\1\47"+
    "\22\14\1\35\10\14\14\0\11\14\1\47\1\246\21\14"+
    "\1\35\10\14\14\0\11\14\1\247\22\14\1\35\10\14"+
    "\14\0\4\14\1\250\4\14\1\47\22\14\1\35\10\14"+
    "\14\0\7\14\1\251\1\14\1\47\22\14\1\35\10\14"+
    "\14\0\10\14\1\142\1\47\22\14\1\35\10\14\14\0"+
    "\1\252\13\35\1\120\30\35\14\0\16\35\1\253\26\35"+
    "\14\0\21\35\1\254\23\35\14\0\2\35\1\255\42\35"+
    "\14\0\3\14\1\256\5\14\1\47\22\14\1\35\10\14"+
    "\14\0\11\14\1\47\2\14\1\257\17\14\1\35\10\14"+
    "\14\0\3\35\1\260\4\35\1\261\3\35\1\120\30\35"+
    "\14\0\11\14\1\47\6\14\1\262\13\14\1\35\10\14"+
    "\14\0\4\14\1\263\4\14\1\47\22\14\1\35\10\14"+
    "\14\0\1\14\1\264\7\14\1\47\22\14\1\35\10\14"+
    "\14\0\1\14\1\265\7\14\1\47\22\14\1\35\10\14"+
    "\14\0\11\14\1\47\2\14\1\266\17\14\1\35\10\14"+
    "\14\0\7\14\1\267\1\14\1\47\22\14\1\35\10\14"+
    "\14\0\10\14\1\75\1\47\22\14\1\35\10\14\14\0"+
    "\11\14\1\67\3\14\1\270\13\14\1\271\2\14\1\35"+
    "\10\14\14\0\11\14\1\47\4\14\1\272\15\14\1\35"+
    "\10\14\31\0\1\273\34\0\54\170\1\274\4\170\55\171"+
    "\1\275\3\171\7\0\5\14\1\276\3\14\1\47\22\14"+
    "\1\35\10\14\14\0\2\35\1\175\10\35\1\277\31\35"+
    "\14\0\3\35\1\300\41\35\14\0\11\14\1\47\3\14"+
    "\1\301\16\14\1\35\10\14\14\0\10\14\1\302\1\47"+
    "\22\14\1\35\10\14\14\0\1\14\1\303\7\14\1\47"+
    "\22\14\1\35\10\14\14\0\3\14\1\304\5\14\1\47"+
    "\22\14\1\35\10\14\14\0\1\14\1\305\7\14\1\47"+
    "\22\14\1\35\10\14\14\0\1\14\1\306\7\14\1\47"+
    "\22\14\1\35\10\14\14\0\5\35\1\307\6\35\1\120"+
    "\30\35\14\0\11\14\1\47\3\14\1\310\16\14\1\35"+
    "\10\14\14\0\11\14\1\47\1\14\1\311\20\14\1\35"+
    "\10\14\14\0\1\35\1\312\43\35\14\0\3\35\1\255"+
    "\41\35\14\0\10\35\1\313\34\35\14\0\14\35\1\314"+
    "\30\35\14\0\11\14\1\47\5\14\1\315\14\14\1\35"+
    "\10\14\14\0\11\14\1\47\6\14\1\211\13\14\1\35"+
    "\10\14\14\0\7\35\1\316\35\35\14\0\14\35\1\317"+
    "\30\35\14\0\1\14\1\320\7\14\1\47\22\14\1\35"+
    "\10\14\14\0\11\14\1\47\1\14\1\321\20\14\1\35"+
    "\10\14\14\0\3\14\1\322\5\14\1\47\22\14\1\35"+
    "\10\14\14\0\11\14\1\47\6\14\1\323\13\14\1\35"+
    "\10\14\14\0\1\324\10\14\1\47\22\14\1\35\10\14"+
    "\14\0\2\14\1\150\6\14\1\47\22\14\1\35\10\14"+
    "\14\0\7\14\1\325\1\14\1\47\22\14\1\35\10\14"+
    "\14\0\11\14\1\326\22\14\1\35\10\14\14\0\11\14"+
    "\1\47\1\14\1\327\20\14\1\35\10\14\17\0\1\330"+
    "\46\0\54\170\1\112\4\170\55\171\1\112\3\171\7\0"+
    "\1\14\1\174\7\14\1\47\22\14\1\35\10\14\14\0"+
    "\15\35\1\331\27\35\14\0\7\35\1\332\35\35\14\0"+
    "\1\14\1\142\7\14\1\47\22\14\1\35\10\14\14\0"+
    "\1\14\1\333\7\14\1\47\22\14\1\35\10\14\14\0"+
    "\11\14\1\334\22\14\1\35\10\14\14\0\11\14\1\47"+
    "\6\14\1\301\13\14\1\35\10\14\14\0\11\14\1\47"+
    "\6\14\1\335\13\14\1\35\10\14\14\0\11\14\1\47"+
    "\7\14\1\336\12\14\1\35\10\14\14\0\13\35\1\337"+
    "\31\35\14\0\1\14\1\340\7\14\1\47\22\14\1\35"+
    "\10\14\14\0\11\14\1\47\3\14\1\341\16\14\1\35"+
    "\10\14\14\0\2\35\1\342\42\35\14\0\3\35\1\343"+
    "\41\35\14\0\11\14\1\344\22\14\1\35\10\14\14\0"+
    "\7\35\1\345\35\35\14\0\3\35\1\346\41\35\14\0"+
    "\11\14\1\347\22\14\1\35\10\14\14\0\5\14\1\350"+
    "\3\14\1\47\22\14\1\35\10\14\14\0\10\14\1\351"+
    "\1\47\22\14\1\35\10\14\14\0\10\14\1\352\1\47"+
    "\22\14\1\35\10\14\14\0\1\14\1\353\7\14\1\47"+
    "\22\14\1\35\10\14\14\0\11\14\1\47\6\14\1\354"+
    "\13\14\1\35\10\14\14\0\14\35\1\120\4\35\1\355"+
    "\23\35\14\0\5\14\1\356\3\14\1\47\22\14\1\35"+
    "\10\14\23\0\1\357\51\0\5\35\1\313\37\35\14\0"+
    "\13\35\1\360\31\35\14\0\11\14\1\47\3\14\1\361"+
    "\16\14\1\35\10\14\14\0\12\35\1\362\1\35\1\120"+
    "\30\35\14\0\10\14\1\363\1\47\22\14\1\35\10\14"+
    "\14\0\10\14\1\137\1\47\22\14\1\35\10\14\14\0"+
    "\16\35\1\364\26\35\14\0\11\14\1\365\22\14\1\35"+
    "\10\14\14\0\11\14\1\366\22\14\1\35\10\14\14\0"+
    "\3\35\1\367\41\35\14\0\17\35\1\313\25\35\14\0"+
    "\14\35\1\120\10\35\1\370\17\35\14\0\10\35\1\371"+
    "\34\35\14\0\1\372\44\35\14\0\4\35\1\373\7\35"+
    "\1\120\30\35\14\0\10\14\1\374\1\47\22\14\1\35"+
    "\10\14\14\0\11\14\1\47\1\14\1\301\20\14\1\35"+
    "\10\14\14\0\11\14\1\375\22\14\1\35\10\14\14\0"+
    "\11\14\1\376\22\14\1\35\10\14\14\0\11\14\1\377"+
    "\22\14\1\35\10\14\14\0\4\35\1\u0100\40\35\14\0"+
    "\11\14\1\47\1\14\1\u0101\20\14\1\35\10\14\27\0"+
    "\1\u0102\45\0\15\35\1\u0103\27\35\14\0\11\14\1\u0104"+
    "\22\14\1\35\10\14\14\0\13\35\1\u0105\31\35\14\0"+
    "\3\14\1\u0106\5\14\1\47\22\14\1\35\10\14\14\0"+
    "\3\35\1\u0107\41\35\14\0\14\35\1\120\1\u0108\27\35"+
    "\14\0\3\35\1\u0109\1\35\1\143\1\u010a\5\35\1\u010b"+
    "\1\35\1\u010c\3\35\1\u010d\22\35\14\0\4\35\1\u0105"+
    "\40\35\14\0\14\35\1\u010e\30\35\14\0\21\35\1\u010f"+
    "\23\35\14\0\1\35\1\u0110\43\35\14\0\2\35\1\u0111"+
    "\42\35\14\0\11\14\1\u0112\22\14\1\35\10\14\14\0"+
    "\14\35\1\120\3\35\1\u0113\24\35\14\0\10\35\1\u0114"+
    "\3\35\1\120\30\35\14\0\4\35\1\u0115\7\35\1\120"+
    "\30\35\14\0\22\35\1\u0116\22\35\14\0\10\14\1\u0117"+
    "\1\47\22\14\1\35\10\14\31\0\1\u0118\43\0\11\35"+
    "\1\u0119\33\35\14\0\14\35\1\120\1\u011a\27\35\14\0"+
    "\5\35\1\u011b\37\35\14\0\11\14\1\47\1\14\1\u011c"+
    "\20\14\1\35\10\14\14\0\14\35\1\u011d\30\35\14\0"+
    "\1\35\1\u011e\43\35\14\0\1\35\1\u011f\43\35\14\0"+
    "\14\35\1\u0120\30\35\14\0\2\35\1\175\11\35\1\u0121"+
    "\30\35\14\0\4\35\1\u0122\6\35\1\215\31\35\14\0"+
    "\3\35\1\u0123\41\35\14\0\3\35\1\u010f\41\35\14\0"+
    "\10\35\1\u010f\34\35\14\0\15\35\1\u0124\27\35\14\0"+
    "\2\35\1\u0125\11\35\1\120\5\35\1\u0126\2\35\1\u0127"+
    "\17\35\14\0\7\35\1\u0128\35\35\14\0\17\35\1\u0129"+
    "\25\35\14\0\3\35\1\u012a\41\35\14\0\22\35\1\u012b"+
    "\22\35\14\0\11\14\1\47\5\14\1\137\14\14\1\35"+
    "\10\14\25\0\1\u012c\47\0\5\35\1\143\37\35\14\0"+
    "\1\35\1\u012d\43\35\14\0\1\35\1\313\43\35\14\0"+
    "\11\14\1\47\6\14\1\u012e\13\14\1\35\10\14\14\0"+
    "\3\35\1\u012f\41\35\14\0\12\35\1\u0130\32\35\14\0"+
    "\21\35\1\u0131\23\35\14\0\2\35\1\u0132\42\35\14\0"+
    "\3\35\1\313\41\35\14\0\13\35\1\u0133\31\35\14\0"+
    "\1\35\1\u0134\43\35\14\0\1\35\1\u0135\43\35\14\0"+
    "\14\35\1\u0136\30\35\14\0\17\35\1\u0137\25\35\14\0"+
    "\14\35\1\u0121\30\35\14\0\2\35\1\u0138\42\35\14\0"+
    "\22\35\1\u0139\22\35\14\0\5\35\1\u010f\37\35\14\0"+
    "\7\35\1\u013a\35\35\21\0\1\u013b\53\0\22\35\1\371"+
    "\22\35\14\0\11\14\1\u013c\22\14\1\35\10\14\14\0"+
    "\17\35\1\u013d\25\35\14\0\21\35\1\313\23\35\14\0"+
    "\7\35\1\u013e\35\35\14\0\13\35\1\u013f\31\35\14\0"+
    "\5\35\1\u0140\37\35\14\0\16\35\1\u0141\26\35\14\0"+
    "\3\35\1\u0142\41\35\14\0\10\35\1\u0143\34\35\14\0"+
    "\10\35\1\u0144\34\35\14\0\12\35\1\u0145\32\35\14\0"+
    "\1\35\1\u010f\43\35\14\0\3\35\1\u0110\41\35\27\0"+
    "\1\u0146\45\0\10\35\1\144\3\35\1\120\30\35\14\0"+
    "\11\35\1\u0147\33\35\14\0\4\35\1\u0148\40\35\14\0"+
    "\12\35\1\144\32\35\14\0\15\35\1\u0149\27\35\14\0"+
    "\4\35\1\u014a\40\35\14\0\11\35\1\u014b\33\35\14\0"+
    "\13\35\1\u014c\31\35\14\0\27\35\1\u014d\15\35\14\0"+
    "\13\35\1\u014e\31\35\32\0\1\u014f\42\0\22\35\1\u0150"+
    "\22\35\14\0\3\35\1\u0151\41\35\14\0\11\35\1\u0152"+
    "\33\35\14\0\13\35\1\u0153\31\35\14\0\10\35\1\u0154"+
    "\34\35\14\0\26\35\1\u0155\16\35\14\0\7\35\1\u0156"+
    "\35\35\14\0\1\313\44\35\17\0\1\u0157\55\0\3\35"+
    "\1\u0158\41\35\14\0\20\35\1\u011b\24\35\14\0\20\35"+
    "\1\u0113\24\35\14\0\5\35\1\u0159\37\35\14\0\1\35"+
    "\1\u015a\43\35\14\0\1\35\1\u0103\43\35\14\0\2\35"+
    "\1\u0103\42\35\30\0\1\u015b\44\0\7\35\1\u015c\35\35"+
    "\14\0\10\35\1\u015d\34\35\14\0\21\35\1\u0110\23\35"+
    "\17\0\1\u015e\55\0\25\35\1\u015f\17\35\14\0\11\35"+
    "\1\u0160\33\35\33\0\1\u0161\41\0\1\35\1\u0162\43\35"+
    "\14\0\14\35\1\u0127\30\35\14\0\20\35\1\u0163\24\35"+
    "\14\0\10\35\1\u0164\34\35\14\0\11\35\1\u0165\33\35"+
    "\14\0\15\35\1\u0166\27\35\14\0\13\35\1\u010e\31\35"+
    "\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16905];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\3\1\1\11\32\1\3\11\37\1\1\0"+
    "\5\1\1\11\50\1\1\0\1\1\1\0\2\1\2\0"+
    "\40\1\1\0\1\1\2\0\35\1\3\0\32\1\1\0"+
    "\26\1\1\0\22\1\1\0\25\1\1\0\23\1\1\0"+
    "\16\1\1\0\12\1\1\0\10\1\1\0\7\1\1\0"+
    "\3\1\1\0\2\1\1\0\2\1\1\11\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[358];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _BuckLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1620) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 2: 
          { return CRLF;
          }
        case 14: break;
        case 7: 
          { return VALUE_STRING;
          }
        case 15: break;
        case 5: 
          { return EQUAL;
          }
        case 16: break;
        case 4: 
          { return COMMENT;
          }
        case 17: break;
        case 9: 
          { return COMMA;
          }
        case 18: break;
        case 12: 
          { return RULE_NAMES;
          }
        case 19: break;
        case 11: 
          { return KEYWORDS;
          }
        case 20: break;
        case 1: 
          { return IDENTIFIER;
          }
        case 21: break;
        case 13: 
          { return VALUE_BOOLEAN;
          }
        case 22: break;
        case 10: 
          { return SEMICOLON;
          }
        case 23: break;
        case 3: 
          { return TokenType.WHITE_SPACE;
          }
        case 24: break;
        case 8: 
          { return BRACES;
          }
        case 25: break;
        case 6: 
          { return MACROS;
          }
        case 26: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
