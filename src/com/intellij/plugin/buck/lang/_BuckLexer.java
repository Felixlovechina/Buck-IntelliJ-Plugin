/* The following code was generated by JFlex 1.4.3 on 8/3/15 12:30 PM */

package com.intellij.plugin.buck.lang;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import com.intellij.plugin.buck.lang.psi.BuckTypes;
import java.util.LinkedList;
import java.util.HashSet;
import java.util.Set;
import java.lang.String;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 8/3/15 12:30 PM from the specification file
 * <tt>/Users/cjlm/Projects/buck_idea_plugin/src/com/intellij/plugin/buck/lang/Buck.flex</tt>
 */
public class _BuckLexer implements FlexLexer, BuckTypes {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int WAITING_VALUE = 2;
  public static final int SINGLE_QUOTE_STRING = 6;
  public static final int YYINITIAL = 0;
  public static final int DOUBLE_QUOTE_STRING = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  0,  0,  0,  0,  0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\2\1\0\1\1\1\2\22\0\1\1\1\0\1\55"+
    "\1\4\3\0\1\54\1\57\1\61\2\0\1\56\3\0\7\41\1\37"+
    "\2\41\3\0\1\5\3\0\1\50\3\40\1\47\1\44\5\40\1\51"+
    "\1\40\1\53\3\40\1\45\1\52\1\43\1\46\5\40\1\60\1\3"+
    "\1\62\1\0\1\17\1\0\1\22\1\24\1\26\1\23\1\7\1\20"+
    "\1\6\1\35\1\21\1\33\1\31\1\13\1\14\1\10\1\15\1\30"+
    "\1\36\1\11\1\27\1\16\1\12\1\34\1\36\1\32\1\25\1\36"+
    "\57\0\1\42\12\0\1\42\4\0\1\42\5\0\27\42\1\0\37\42"+
    "\1\0\u01ca\42\4\0\14\42\16\0\5\42\7\0\1\42\1\0\1\42"+
    "\201\0\5\42\1\0\2\42\2\0\4\42\10\0\1\42\1\0\3\42"+
    "\1\0\1\42\1\0\24\42\1\0\123\42\1\0\213\42\10\0\236\42"+
    "\11\0\46\42\2\0\1\42\7\0\47\42\110\0\33\42\5\0\3\42"+
    "\55\0\53\42\43\0\2\42\1\0\143\42\1\0\1\42\17\0\2\42"+
    "\7\0\2\42\12\0\3\42\2\0\1\42\20\0\1\42\1\0\36\42"+
    "\35\0\131\42\13\0\1\42\30\0\41\42\11\0\2\42\4\0\1\42"+
    "\5\0\26\42\4\0\1\42\11\0\1\42\3\0\1\42\27\0\31\42"+
    "\107\0\1\42\1\0\13\42\127\0\66\42\3\0\1\42\22\0\1\42"+
    "\7\0\12\42\17\0\7\42\1\0\7\42\5\0\10\42\2\0\2\42"+
    "\2\0\26\42\1\0\7\42\1\0\1\42\3\0\4\42\3\0\1\42"+
    "\20\0\1\42\15\0\2\42\1\0\3\42\16\0\2\42\23\0\6\42"+
    "\4\0\2\42\2\0\26\42\1\0\7\42\1\0\2\42\1\0\2\42"+
    "\1\0\2\42\37\0\4\42\1\0\1\42\23\0\3\42\20\0\11\42"+
    "\1\0\3\42\1\0\26\42\1\0\7\42\1\0\2\42\1\0\5\42"+
    "\3\0\1\42\22\0\1\42\17\0\2\42\43\0\10\42\2\0\2\42"+
    "\2\0\26\42\1\0\7\42\1\0\2\42\1\0\5\42\3\0\1\42"+
    "\36\0\2\42\1\0\3\42\17\0\1\42\21\0\1\42\1\0\6\42"+
    "\3\0\3\42\1\0\4\42\3\0\2\42\1\0\1\42\1\0\2\42"+
    "\3\0\2\42\3\0\3\42\3\0\14\42\26\0\1\42\64\0\10\42"+
    "\1\0\3\42\1\0\27\42\1\0\12\42\1\0\5\42\3\0\1\42"+
    "\32\0\2\42\6\0\2\42\43\0\10\42\1\0\3\42\1\0\27\42"+
    "\1\0\12\42\1\0\5\42\3\0\1\42\40\0\1\42\1\0\2\42"+
    "\17\0\2\42\22\0\10\42\1\0\3\42\1\0\51\42\2\0\1\42"+
    "\20\0\1\42\21\0\2\42\30\0\6\42\5\0\22\42\3\0\30\42"+
    "\1\0\11\42\1\0\1\42\2\0\7\42\72\0\60\42\1\0\2\42"+
    "\14\0\7\42\72\0\2\42\1\0\1\42\2\0\2\42\1\0\1\42"+
    "\2\0\1\42\6\0\4\42\1\0\7\42\1\0\3\42\1\0\1\42"+
    "\1\0\1\42\2\0\2\42\1\0\4\42\1\0\2\42\11\0\1\42"+
    "\2\0\5\42\1\0\1\42\25\0\4\42\40\0\1\42\77\0\10\42"+
    "\1\0\44\42\33\0\5\42\163\0\53\42\24\0\1\42\20\0\6\42"+
    "\4\0\4\42\3\0\1\42\3\0\2\42\7\0\3\42\4\0\15\42"+
    "\14\0\1\42\21\0\46\42\1\0\1\42\5\0\1\42\2\0\53\42"+
    "\1\0\u014d\42\1\0\4\42\2\0\7\42\1\0\1\42\1\0\4\42"+
    "\2\0\51\42\1\0\4\42\2\0\41\42\1\0\4\42\2\0\7\42"+
    "\1\0\1\42\1\0\4\42\2\0\17\42\1\0\71\42\1\0\4\42"+
    "\2\0\103\42\45\0\20\42\20\0\125\42\14\0\u026c\42\2\0\21\42"+
    "\1\0\32\42\5\0\113\42\25\0\15\42\1\0\4\42\16\0\22\42"+
    "\16\0\22\42\16\0\15\42\1\0\3\42\17\0\64\42\43\0\1\42"+
    "\4\0\1\42\103\0\130\42\10\0\51\42\1\0\1\42\5\0\106\42"+
    "\12\0\35\42\63\0\36\42\2\0\5\42\13\0\54\42\25\0\7\42"+
    "\70\0\27\42\11\0\65\42\122\0\1\42\135\0\57\42\21\0\7\42"+
    "\67\0\36\42\15\0\2\42\12\0\54\42\32\0\44\42\51\0\3\42"+
    "\12\0\44\42\153\0\4\42\1\0\4\42\3\0\2\42\11\0\300\42"+
    "\100\0\u0116\42\2\0\6\42\2\0\46\42\2\0\6\42\2\0\10\42"+
    "\1\0\1\42\1\0\1\42\1\0\1\42\1\0\37\42\2\0\65\42"+
    "\1\0\7\42\1\0\1\42\3\0\3\42\1\0\7\42\3\0\4\42"+
    "\2\0\6\42\4\0\15\42\5\0\3\42\1\0\7\42\164\0\1\42"+
    "\15\0\1\42\20\0\15\42\145\0\1\42\4\0\1\42\2\0\12\42"+
    "\1\0\1\42\3\0\5\42\6\0\1\42\1\0\1\42\1\0\1\42"+
    "\1\0\4\42\1\0\13\42\2\0\4\42\5\0\5\42\4\0\1\42"+
    "\64\0\2\42\u0a7b\0\57\42\1\0\57\42\1\0\205\42\6\0\4\42"+
    "\3\0\2\42\14\0\46\42\1\0\1\42\5\0\1\42\2\0\70\42"+
    "\7\0\1\42\20\0\27\42\11\0\7\42\1\0\7\42\1\0\7\42"+
    "\1\0\7\42\1\0\7\42\1\0\7\42\1\0\7\42\1\0\7\42"+
    "\120\0\1\42\u01d5\0\2\42\52\0\5\42\5\0\2\42\4\0\126\42"+
    "\6\0\3\42\1\0\132\42\1\0\4\42\5\0\51\42\3\0\136\42"+
    "\21\0\33\42\65\0\20\42\u0200\0\u19b6\42\112\0\u51cd\42\63\0\u048d\42"+
    "\103\0\56\42\2\0\u010d\42\3\0\20\42\12\0\2\42\24\0\57\42"+
    "\20\0\31\42\10\0\106\42\61\0\11\42\2\0\147\42\2\0\4\42"+
    "\1\0\4\42\14\0\13\42\115\0\12\42\1\0\3\42\1\0\4\42"+
    "\1\0\27\42\35\0\64\42\16\0\62\42\76\0\6\42\3\0\1\42"+
    "\16\0\34\42\12\0\27\42\31\0\35\42\7\0\57\42\34\0\1\42"+
    "\60\0\51\42\27\0\3\42\1\0\10\42\24\0\27\42\3\0\1\42"+
    "\5\0\60\42\1\0\1\42\3\0\2\42\2\0\5\42\2\0\1\42"+
    "\1\0\1\42\30\0\3\42\2\0\13\42\7\0\3\42\14\0\6\42"+
    "\2\0\6\42\2\0\6\42\11\0\7\42\1\0\7\42\221\0\43\42"+
    "\35\0\u2ba4\42\14\0\27\42\4\0\61\42\u2104\0\u016e\42\2\0\152\42"+
    "\46\0\7\42\14\0\5\42\5\0\1\42\1\0\12\42\1\0\15\42"+
    "\1\0\5\42\1\0\1\42\1\0\2\42\1\0\2\42\1\0\154\42"+
    "\41\0\u016b\42\22\0\100\42\2\0\66\42\50\0\14\42\164\0\5\42"+
    "\1\0\207\42\44\0\32\42\6\0\32\42\13\0\131\42\3\0\6\42"+
    "\2\0\6\42\2\0\6\42\2\0\3\42\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\7\1\1\5\14\1"+
    "\2\5\1\1\3\5\2\6\1\7\1\10\1\11\1\12"+
    "\1\13\44\1\1\0\4\5\1\1\5\6\11\1\1\14"+
    "\14\1\1\14\27\1\1\0\1\5\2\0\2\5\1\1"+
    "\2\0\2\1\1\15\12\1\1\16\33\1\2\0\1\16"+
    "\1\17\2\0\47\1\4\0\21\1\1\15\22\1\2\0"+
    "\31\1\1\14\4\1\2\0\4\1\1\14\26\1\2\0"+
    "\20\1\1\14\14\1\1\0\34\1\1\0\25\1\1\0"+
    "\20\1\1\0\15\1\1\15\42\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[475];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\63\0\314\0\377\0\u0132"+
    "\0\u0165\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297\0\u02ca"+
    "\0\u02fd\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc\0\u042f\0\u0462"+
    "\0\u0495\0\u04c8\0\u04fb\0\u052e\0\u0561\0\u0594\0\u05c7\0\u05fa"+
    "\0\u062d\0\63\0\63\0\63\0\63\0\63\0\u0660\0\u0693"+
    "\0\u06c6\0\u06f9\0\u072c\0\u075f\0\u0792\0\u07c5\0\u07f8\0\u082b"+
    "\0\u085e\0\u0891\0\u08c4\0\u08f7\0\u092a\0\u095d\0\u0990\0\u09c3"+
    "\0\u09f6\0\u0a29\0\u0a5c\0\u0a8f\0\u0ac2\0\u0af5\0\u0b28\0\u0b5b"+
    "\0\u0b8e\0\u0bc1\0\u0bf4\0\u0c27\0\u0c5a\0\u0c8d\0\u0cc0\0\u0cf3"+
    "\0\u0d26\0\u0d59\0\u0d8c\0\u0dbf\0\u0df2\0\u0e25\0\u0e58\0\u0e8b"+
    "\0\u0ebe\0\63\0\u0ef1\0\u0f24\0\u0f57\0\u0f8a\0\u0fbd\0\u0ff0"+
    "\0\u1023\0\u1056\0\u1089\0\u10bc\0\u10ef\0\u1122\0\u1155\0\u1188"+
    "\0\u11bb\0\u11ee\0\u1221\0\u1254\0\u1287\0\u12ba\0\u12ed\0\u1320"+
    "\0\u1353\0\u1386\0\u13b9\0\u0198\0\u13ec\0\u141f\0\u1452\0\u1485"+
    "\0\u14b8\0\u14eb\0\u151e\0\u1551\0\u1584\0\u15b7\0\u15ea\0\u161d"+
    "\0\u1650\0\u1683\0\u16b6\0\u16e9\0\u171c\0\u174f\0\u1782\0\u17b5"+
    "\0\u17e8\0\u181b\0\u184e\0\u1881\0\u18b4\0\u18e7\0\u191a\0\u194d"+
    "\0\u1980\0\u19b3\0\u19e6\0\u1a19\0\u1a4c\0\u1a7f\0\u0198\0\u1ab2"+
    "\0\u1ae5\0\u1b18\0\u1b4b\0\u1b7e\0\u1bb1\0\u1be4\0\u1c17\0\u1c4a"+
    "\0\u1c7d\0\u0198\0\u1cb0\0\u1ce3\0\u1d16\0\u1d49\0\u1d7c\0\u1daf"+
    "\0\u1de2\0\u1e15\0\u1e48\0\u1e7b\0\u1eae\0\u1ee1\0\u1f14\0\u1f47"+
    "\0\u1f7a\0\u1fad\0\u1fe0\0\u2013\0\u2046\0\u2079\0\u20ac\0\u20df"+
    "\0\u2112\0\u2145\0\u2178\0\u21ab\0\u21de\0\u2211\0\u2244\0\u04fb"+
    "\0\u0198\0\u2277\0\u22aa\0\u22dd\0\u2310\0\u2343\0\u2376\0\u23a9"+
    "\0\u23dc\0\u240f\0\u2442\0\u2475\0\u24a8\0\u24db\0\u250e\0\u2541"+
    "\0\u2574\0\u25a7\0\u25da\0\u260d\0\u2640\0\u2673\0\u26a6\0\u26d9"+
    "\0\u270c\0\u273f\0\u2772\0\u27a5\0\u27d8\0\u280b\0\u283e\0\u2871"+
    "\0\u28a4\0\u28d7\0\u290a\0\u293d\0\u2970\0\u29a3\0\u29d6\0\u2a09"+
    "\0\u2a3c\0\u2a6f\0\u2aa2\0\u2ad5\0\u2b08\0\u2b3b\0\u2b6e\0\u2ba1"+
    "\0\u2bd4\0\u2c07\0\u2c3a\0\u2c6d\0\u2ca0\0\u2cd3\0\u2d06\0\u2d39"+
    "\0\u2d6c\0\u2d9f\0\u2dd2\0\u2e05\0\u2e38\0\u2e6b\0\u2e9e\0\u052e"+
    "\0\u2ed1\0\u2f04\0\u2f37\0\u2f6a\0\u2f9d\0\u2fd0\0\u3003\0\u3036"+
    "\0\u3069\0\u309c\0\u30cf\0\u3102\0\u3135\0\u3168\0\u319b\0\u31ce"+
    "\0\u3201\0\u3234\0\u3267\0\u329a\0\u32cd\0\u3300\0\u3333\0\u3366"+
    "\0\u3399\0\u33cc\0\u33ff\0\u3432\0\u3465\0\u3498\0\u34cb\0\u34fe"+
    "\0\u3531\0\u3564\0\u3597\0\u35ca\0\u35fd\0\u3630\0\u3663\0\u3696"+
    "\0\u36c9\0\u36fc\0\u372f\0\u3762\0\u3795\0\u37c8\0\u37fb\0\u382e"+
    "\0\u3861\0\u3894\0\u38c7\0\u38fa\0\u392d\0\u3960\0\u3993\0\u39c6"+
    "\0\u39f9\0\u3a2c\0\u3a5f\0\u3a92\0\u3ac5\0\u3af8\0\u3b2b\0\u3b5e"+
    "\0\u3b91\0\u3bc4\0\u3bf7\0\u3c2a\0\u3c5d\0\u3c90\0\u3cc3\0\u3cf6"+
    "\0\u3d29\0\u3d5c\0\u3d8f\0\u3dc2\0\u3df5\0\u3e28\0\u3e5b\0\u3e8e"+
    "\0\u3ec1\0\u3ef4\0\u3f27\0\u3f5a\0\u3f8d\0\u3fc0\0\u3ff3\0\u4026"+
    "\0\u4059\0\u408c\0\u40bf\0\u40f2\0\u4125\0\u4158\0\u418b\0\u41be"+
    "\0\u41f1\0\u052e\0\u4224\0\u4257\0\u428a\0\u42bd\0\u42f0\0\u4323"+
    "\0\u4356\0\u4389\0\u43bc\0\u43ef\0\u4422\0\u4455\0\u4488\0\u44bb"+
    "\0\u44ee\0\u4521\0\u4554\0\u4587\0\u45ba\0\u45ed\0\u4620\0\u4653"+
    "\0\u4686\0\u46b9\0\u46ec\0\u471f\0\u4752\0\u4785\0\u47b8\0\u47eb"+
    "\0\u481e\0\u4851\0\u4884\0\u48b7\0\u48ea\0\u491d\0\u4950\0\u4983"+
    "\0\u49b6\0\u49e9\0\u4a1c\0\u4a4f\0\u4a82\0\u4ab5\0\u4ae8\0\u4b1b"+
    "\0\u4b4e\0\u4b81\0\u4bb4\0\u4be7\0\u4c1a\0\u4c4d\0\u4c80\0\u4cb3"+
    "\0\u4ce6\0\u4d19\0\u4d4c\0\u4d7f\0\u4db2\0\u4de5\0\u4e18\0\u4e4b"+
    "\0\u4e7e\0\u4eb1\0\u4ee4\0\u4f17\0\u4f4a\0\u4f7d\0\u4fb0\0\u4fe3"+
    "\0\u5016\0\u5049\0\u507c\0\u50af\0\u50e2\0\u5115\0\u5148\0\u517b"+
    "\0\u51ae\0\u51e1\0\u5214\0\u5247\0\u527a\0\u52ad\0\u52e0\0\u5313"+
    "\0\u5346\0\u5379\0\u53ac\0\u53df\0\u5412\0\u5445\0\u5478\0\u54ab"+
    "\0\63\0\u54de\0\u5511\0\u5544\0\u5577\0\u55aa\0\u55dd\0\u5610"+
    "\0\u5643\0\u5676\0\u56a9\0\u56dc\0\u570f\0\u5742\0\u5775\0\u57a8"+
    "\0\u57db\0\u580e\0\u5841\0\u5874\0\u58a7\0\u58da\0\u590d\0\u5940"+
    "\0\u5973\0\u59a6\0\u59d9\0\u5a0c\0\u5a3f\0\u5a72\0\u5aa5\0\u5ad8"+
    "\0\u5b0b\0\u5b3e\0\u5b71";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[475];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\2\12\1\13\1\12\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\12\1\23\1\24\1\25\1\26"+
    "\1\12\1\27\1\30\1\31\1\12\1\32\1\33\1\32"+
    "\1\34\1\35\1\36\6\33\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\64\0\2\3\60\0\2\4"+
    "\1\0\60\4\6\0\1\12\1\47\3\12\1\50\3\12"+
    "\1\51\22\12\1\34\11\12\15\0\11\12\1\51\12\12"+
    "\1\52\7\12\1\34\11\12\15\0\11\12\1\51\2\12"+
    "\1\53\1\54\16\12\1\34\11\12\15\0\1\12\1\55"+
    "\5\12\1\56\1\12\1\51\22\12\1\34\11\12\15\0"+
    "\11\12\1\51\22\12\1\34\11\12\15\0\11\12\1\51"+
    "\2\12\1\57\17\12\1\34\11\12\15\0\1\12\1\60"+
    "\1\12\1\61\5\12\1\51\22\12\1\34\11\12\15\0"+
    "\11\34\1\15\17\34\3\15\1\34\11\15\15\0\7\12"+
    "\1\62\1\12\1\51\2\12\1\63\17\12\1\34\11\12"+
    "\15\0\2\12\1\64\3\12\1\65\2\12\1\51\22\12"+
    "\1\34\11\12\15\0\2\12\1\66\6\12\1\51\1\12"+
    "\1\67\1\70\4\12\1\71\1\72\11\12\1\34\11\12"+
    "\15\0\1\12\1\73\7\12\1\74\22\12\1\34\11\12"+
    "\15\0\11\12\1\51\1\12\1\75\20\12\1\34\11\12"+
    "\15\0\7\12\1\76\1\12\1\51\12\12\1\77\7\12"+
    "\1\34\11\12\15\0\3\12\1\100\1\101\2\12\1\102"+
    "\1\103\1\51\22\12\1\34\11\12\15\0\3\12\1\104"+
    "\5\12\1\51\2\12\1\105\2\12\1\106\14\12\1\34"+
    "\11\12\15\0\1\12\1\107\7\12\1\51\22\12\1\34"+
    "\11\12\15\0\11\12\1\51\2\12\1\110\17\12\1\34"+
    "\11\12\15\0\11\12\1\51\1\12\1\111\20\12\1\34"+
    "\11\12\15\0\1\12\1\112\7\12\1\51\22\12\1\34"+
    "\11\12\15\0\11\113\1\114\17\113\3\32\1\0\11\32"+
    "\15\0\11\12\1\115\17\12\3\33\1\34\11\33\15\0"+
    "\46\34\15\0\3\12\1\61\5\12\1\115\17\12\3\33"+
    "\1\34\2\33\1\116\6\33\15\0\11\12\1\115\2\12"+
    "\1\63\14\12\3\33\1\34\5\33\1\117\3\33\15\0"+
    "\7\12\1\120\1\12\1\115\17\12\3\33\1\34\11\33"+
    "\7\0\3\121\1\122\50\121\1\123\6\121\3\124\1\122"+
    "\51\124\1\125\5\124\6\0\2\12\1\126\6\12\1\51"+
    "\22\12\1\34\11\12\15\0\7\12\1\127\1\12\1\51"+
    "\22\12\1\34\11\12\15\0\14\34\1\130\3\34\1\131"+
    "\25\34\15\0\11\12\1\51\6\12\1\132\1\12\1\133"+
    "\11\12\1\34\11\12\15\0\6\12\1\134\2\12\1\51"+
    "\22\12\1\34\11\12\15\0\11\12\1\51\11\12\1\135"+
    "\10\12\1\34\11\12\15\0\6\12\1\136\2\12\1\51"+
    "\7\12\1\137\12\12\1\34\11\12\15\0\11\12\1\51"+
    "\4\12\1\140\15\12\1\34\11\12\15\0\2\12\1\141"+
    "\6\12\1\51\1\12\1\142\20\12\1\34\11\12\15\0"+
    "\11\12\1\51\7\12\1\143\12\12\1\34\11\12\15\0"+
    "\4\12\1\144\4\12\1\51\22\12\1\34\11\12\15\0"+
    "\3\12\1\145\5\12\1\51\22\12\1\34\11\12\15\0"+
    "\5\12\1\146\3\12\1\51\22\12\1\34\11\12\15\0"+
    "\11\12\1\51\6\12\1\147\13\12\1\34\11\12\15\0"+
    "\11\12\1\51\10\12\1\150\11\12\1\34\11\12\15\0"+
    "\2\12\1\151\6\12\1\51\3\12\1\152\16\12\1\34"+
    "\11\12\15\0\11\12\1\51\3\12\1\153\16\12\1\34"+
    "\11\12\15\0\3\12\1\154\5\12\1\51\22\12\1\34"+
    "\11\12\15\0\11\12\1\51\7\12\1\155\12\12\1\34"+
    "\11\12\15\0\11\12\1\51\11\12\1\156\10\12\1\34"+
    "\11\12\15\0\11\12\1\51\10\12\1\157\11\12\1\34"+
    "\11\12\15\0\5\34\1\160\2\34\1\161\3\34\1\130"+
    "\1\34\1\162\1\34\1\131\25\34\15\0\2\12\1\163"+
    "\6\12\1\51\22\12\1\34\11\12\15\0\2\12\1\164"+
    "\3\12\1\165\2\12\1\51\22\12\1\34\11\12\15\0"+
    "\11\12\1\51\12\12\1\166\7\12\1\34\11\12\15\0"+
    "\11\12\1\51\6\12\1\167\13\12\1\34\11\12\15\0"+
    "\11\12\1\51\4\12\1\170\15\12\1\34\11\12\15\0"+
    "\2\12\1\171\1\12\1\172\4\12\1\51\22\12\1\34"+
    "\11\12\15\0\7\12\1\173\1\12\1\51\22\12\1\34"+
    "\11\12\15\0\1\12\1\174\5\12\1\175\1\12\1\51"+
    "\22\12\1\34\11\12\15\0\11\12\1\51\6\12\1\176"+
    "\13\12\1\34\11\12\15\0\10\12\1\177\1\51\22\12"+
    "\1\34\11\12\15\0\11\12\1\51\5\12\1\200\14\12"+
    "\1\34\11\12\15\0\11\12\1\51\14\12\1\201\5\12"+
    "\1\34\11\12\15\0\11\12\1\51\7\12\1\202\12\12"+
    "\1\34\11\12\15\0\11\12\1\51\2\12\1\203\17\12"+
    "\1\34\11\12\15\0\11\113\1\204\22\113\1\0\11\113"+
    "\26\0\1\205\2\0\1\206\3\0\1\207\10\0\3\205"+
    "\1\0\11\205\15\0\11\34\1\15\2\34\1\130\3\34"+
    "\1\131\10\34\3\15\1\34\11\15\15\0\11\12\1\115"+
    "\17\12\3\33\1\34\3\33\1\210\5\33\15\0\11\12"+
    "\1\115\17\12\3\33\1\34\6\33\1\211\2\33\15\0"+
    "\2\12\1\212\6\12\1\51\22\12\1\34\11\12\7\0"+
    "\3\121\1\122\50\121\1\122\6\121\54\0\1\213\6\0"+
    "\3\124\1\122\51\124\1\122\5\124\55\0\1\214\13\0"+
    "\3\12\1\215\5\12\1\216\22\12\1\34\11\12\15\0"+
    "\11\12\1\51\4\12\1\217\15\12\1\34\11\12\15\0"+
    "\2\34\1\220\43\34\15\0\24\34\1\221\21\34\15\0"+
    "\5\12\1\222\3\12\1\51\22\12\1\34\11\12\15\0"+
    "\7\12\1\223\1\12\1\51\22\12\1\34\11\12\15\0"+
    "\1\12\1\154\7\12\1\51\22\12\1\34\11\12\15\0"+
    "\11\12\1\224\22\12\1\34\11\12\15\0\7\12\1\225"+
    "\1\12\1\51\22\12\1\34\11\12\15\0\7\12\1\226"+
    "\1\12\1\51\22\12\1\34\11\12\15\0\7\12\1\227"+
    "\1\12\1\51\22\12\1\34\11\12\15\0\11\12\1\51"+
    "\1\12\1\230\20\12\1\34\11\12\15\0\2\12\1\154"+
    "\6\12\1\51\22\12\1\34\11\12\15\0\10\12\1\231"+
    "\1\51\22\12\1\34\11\12\15\0\1\12\1\232\7\12"+
    "\1\51\22\12\1\34\11\12\15\0\11\12\1\51\6\12"+
    "\1\233\13\12\1\34\11\12\15\0\11\12\1\51\7\12"+
    "\1\144\12\12\1\34\11\12\15\0\5\12\1\234\3\12"+
    "\1\51\22\12\1\34\11\12\15\0\7\12\1\235\1\12"+
    "\1\51\22\12\1\34\11\12\15\0\7\12\1\236\1\12"+
    "\1\51\22\12\1\34\11\12\15\0\3\12\1\237\5\12"+
    "\1\51\22\12\1\34\11\12\15\0\5\12\1\154\3\12"+
    "\1\51\22\12\1\34\11\12\15\0\1\12\1\240\7\12"+
    "\1\51\22\12\1\34\11\12\15\0\11\12\1\241\22\12"+
    "\1\34\11\12\15\0\11\12\1\51\7\12\1\154\12\12"+
    "\1\34\11\12\15\0\13\34\1\242\32\34\15\0\1\34"+
    "\1\243\44\34\15\0\13\34\1\244\32\34\15\0\11\12"+
    "\1\51\2\12\1\245\17\12\1\34\11\12\15\0\10\12"+
    "\1\246\1\51\22\12\1\34\11\12\15\0\11\12\1\51"+
    "\10\12\1\247\11\12\1\34\11\12\15\0\11\12\1\74"+
    "\22\12\1\34\11\12\15\0\11\12\1\250\7\12\1\154"+
    "\12\12\1\34\11\12\15\0\11\12\1\51\3\12\1\251"+
    "\16\12\1\34\11\12\15\0\11\12\1\51\2\12\1\53"+
    "\17\12\1\34\11\12\15\0\3\12\1\252\5\12\1\51"+
    "\22\12\1\34\11\12\15\0\3\12\1\134\5\12\1\51"+
    "\22\12\1\34\11\12\15\0\11\12\1\51\4\12\1\253"+
    "\3\12\1\254\11\12\1\34\11\12\15\0\1\255\10\12"+
    "\1\51\10\12\1\256\2\12\1\257\6\12\1\34\11\12"+
    "\15\0\11\12\1\51\11\12\1\260\10\12\1\34\11\12"+
    "\15\0\11\12\1\51\15\12\1\261\4\12\1\34\11\12"+
    "\15\0\11\12\1\51\7\12\1\262\12\12\1\34\11\12"+
    "\15\0\11\12\1\51\2\12\1\263\17\12\1\34\11\12"+
    "\15\0\11\12\1\51\1\12\1\264\20\12\1\34\11\12"+
    "\15\0\11\12\1\51\3\12\1\265\16\12\1\34\11\12"+
    "\31\0\1\206\3\0\1\207\53\0\1\205\17\0\3\205"+
    "\1\0\11\205\17\0\1\266\104\0\1\267\36\0\11\12"+
    "\1\115\17\12\3\33\1\34\4\33\1\270\4\33\15\0"+
    "\11\12\1\115\17\12\3\33\1\34\7\33\1\210\1\33"+
    "\15\0\1\12\1\271\7\12\1\51\22\12\1\34\11\12"+
    "\7\0\54\213\1\272\6\213\55\214\1\273\5\214\6\0"+
    "\4\12\1\274\4\12\1\51\22\12\1\34\11\12\15\0"+
    "\14\34\1\275\3\34\1\131\25\34\15\0\15\34\1\276"+
    "\30\34\15\0\24\34\1\277\21\34\15\0\4\12\1\300"+
    "\4\12\1\51\22\12\1\34\11\12\15\0\3\12\1\301"+
    "\5\12\1\51\22\12\1\34\11\12\15\0\5\34\1\160"+
    "\6\34\1\130\3\34\1\131\25\34\15\0\10\12\1\302"+
    "\1\51\22\12\1\34\11\12\15\0\4\12\1\303\4\12"+
    "\1\51\22\12\1\34\11\12\15\0\5\12\1\304\3\12"+
    "\1\51\22\12\1\34\11\12\15\0\11\12\1\51\1\305"+
    "\21\12\1\34\11\12\15\0\11\12\1\306\22\12\1\34"+
    "\11\12\15\0\1\12\1\307\7\12\1\51\22\12\1\34"+
    "\11\12\15\0\4\12\1\310\4\12\1\51\22\12\1\34"+
    "\11\12\15\0\3\12\1\311\5\12\1\51\22\12\1\34"+
    "\11\12\15\0\10\12\1\312\1\51\22\12\1\34\11\12"+
    "\15\0\7\12\1\313\1\12\1\51\22\12\1\34\11\12"+
    "\15\0\10\12\1\157\1\51\22\12\1\34\11\12\15\0"+
    "\1\314\13\34\1\130\3\34\1\131\25\34\15\0\16\34"+
    "\1\315\27\34\15\0\21\34\1\316\24\34\15\0\2\34"+
    "\1\317\43\34\15\0\3\12\1\320\5\12\1\51\22\12"+
    "\1\34\11\12\15\0\11\12\1\51\2\12\1\321\17\12"+
    "\1\34\11\12\15\0\11\12\1\51\1\12\1\322\20\12"+
    "\1\34\11\12\15\0\3\34\1\323\4\34\1\324\3\34"+
    "\1\130\3\34\1\131\25\34\15\0\11\12\1\51\1\12"+
    "\1\325\20\12\1\34\11\12\15\0\11\12\1\51\6\12"+
    "\1\326\13\12\1\34\11\12\15\0\4\12\1\327\4\12"+
    "\1\51\22\12\1\34\11\12\15\0\3\12\1\330\5\12"+
    "\1\51\22\12\1\34\11\12\15\0\4\12\1\331\4\12"+
    "\1\51\22\12\1\34\11\12\15\0\1\12\1\332\7\12"+
    "\1\51\22\12\1\34\11\12\15\0\1\12\1\333\7\12"+
    "\1\51\22\12\1\34\11\12\15\0\11\12\1\51\2\12"+
    "\1\334\17\12\1\34\11\12\15\0\7\12\1\335\1\12"+
    "\1\51\22\12\1\34\11\12\15\0\10\12\1\336\1\51"+
    "\22\12\1\34\11\12\15\0\11\12\1\74\3\12\1\337"+
    "\13\12\1\340\2\12\1\34\11\12\15\0\11\12\1\51"+
    "\4\12\1\341\15\12\1\34\11\12\15\0\1\12\1\342"+
    "\7\12\1\51\22\12\1\34\11\12\32\0\1\343\71\0"+
    "\1\344\30\0\54\213\1\345\6\213\55\214\1\346\5\214"+
    "\6\0\5\12\1\347\3\12\1\51\22\12\1\34\11\12"+
    "\15\0\2\34\1\220\10\34\1\350\32\34\15\0\3\34"+
    "\1\351\42\34\15\0\11\34\1\352\34\34\15\0\11\12"+
    "\1\51\3\12\1\353\16\12\1\34\11\12\15\0\10\12"+
    "\1\354\1\51\22\12\1\34\11\12\15\0\1\12\1\355"+
    "\7\12\1\51\22\12\1\34\11\12\15\0\3\12\1\356"+
    "\5\12\1\51\22\12\1\34\11\12\15\0\1\12\1\357"+
    "\7\12\1\51\22\12\1\34\11\12\15\0\1\12\1\360"+
    "\7\12\1\51\22\12\1\34\11\12\15\0\5\34\1\361"+
    "\6\34\1\130\3\34\1\131\25\34\15\0\11\12\1\362"+
    "\22\12\1\34\11\12\15\0\11\12\1\51\3\12\1\363"+
    "\16\12\1\34\11\12\15\0\10\12\1\364\1\51\22\12"+
    "\1\34\11\12\15\0\11\12\1\51\2\12\1\365\17\12"+
    "\1\34\11\12\15\0\11\12\1\51\1\12\1\366\20\12"+
    "\1\34\11\12\15\0\1\34\1\367\44\34\15\0\3\34"+
    "\1\317\42\34\15\0\10\34\1\370\35\34\15\0\14\34"+
    "\1\371\31\34\15\0\11\12\1\51\5\12\1\372\14\12"+
    "\1\34\11\12\15\0\11\12\1\51\6\12\1\240\13\12"+
    "\1\34\11\12\15\0\5\12\1\373\3\12\1\51\22\12"+
    "\1\34\11\12\15\0\7\34\1\374\36\34\15\0\14\34"+
    "\1\375\31\34\15\0\3\12\1\376\5\12\1\51\22\12"+
    "\1\34\11\12\15\0\1\12\1\377\7\12\1\51\22\12"+
    "\1\34\11\12\15\0\11\12\1\51\1\12\1\u0100\20\12"+
    "\1\34\11\12\15\0\7\12\1\u0101\1\12\1\51\22\12"+
    "\1\34\11\12\15\0\11\12\1\51\2\12\1\u0102\17\12"+
    "\1\34\11\12\15\0\3\12\1\u0103\5\12\1\51\22\12"+
    "\1\34\11\12\15\0\11\12\1\51\6\12\1\u0104\13\12"+
    "\1\34\11\12\15\0\1\u0105\10\12\1\51\22\12\1\34"+
    "\11\12\15\0\2\12\1\166\6\12\1\51\22\12\1\34"+
    "\11\12\15\0\7\12\1\u0106\1\12\1\51\22\12\1\34"+
    "\11\12\15\0\7\12\1\u0107\1\12\1\51\22\12\1\34"+
    "\11\12\15\0\11\12\1\u0108\22\12\1\34\11\12\15\0"+
    "\11\12\1\51\1\12\1\u0109\20\12\1\34\11\12\15\0"+
    "\3\12\1\u010a\5\12\1\51\22\12\1\34\11\12\20\0"+
    "\1\u010b\70\0\1\u010c\43\0\54\213\1\122\6\213\55\214"+
    "\1\122\5\214\6\0\1\12\1\217\7\12\1\51\22\12"+
    "\1\34\11\12\15\0\15\34\1\u010d\30\34\15\0\7\34"+
    "\1\u010e\36\34\15\0\5\34\1\160\40\34\15\0\1\12"+
    "\1\157\7\12\1\51\22\12\1\34\11\12\15\0\1\12"+
    "\1\u010f\7\12\1\51\22\12\1\34\11\12\15\0\11\12"+
    "\1\u0110\22\12\1\34\11\12\15\0\11\12\1\51\6\12"+
    "\1\353\13\12\1\34\11\12\15\0\11\12\1\51\6\12"+
    "\1\u0111\13\12\1\34\11\12\15\0\11\12\1\51\7\12"+
    "\1\u0112\12\12\1\34\11\12\15\0\13\34\1\u0113\32\34"+
    "\15\0\14\34\1\130\3\34\1\131\1\u0114\24\34\15\0"+
    "\1\12\1\u0115\7\12\1\51\22\12\1\34\11\12\15\0"+
    "\11\12\1\u0116\22\12\1\34\11\12\15\0\10\12\1\u0117"+
    "\1\51\22\12\1\34\11\12\15\0\11\12\1\51\3\12"+
    "\1\u0118\16\12\1\34\11\12\15\0\2\34\1\u0119\43\34"+
    "\15\0\3\34\1\u011a\42\34\15\0\11\12\1\u011b\22\12"+
    "\1\34\11\12\15\0\1\12\1\u011c\7\12\1\51\22\12"+
    "\1\34\11\12\15\0\7\34\1\u011d\36\34\15\0\3\34"+
    "\1\u011e\42\34\15\0\11\12\1\u011f\22\12\1\34\11\12"+
    "\15\0\11\12\1\u0120\22\12\1\34\11\12\15\0\5\12"+
    "\1\u0121\3\12\1\51\22\12\1\34\11\12\15\0\11\12"+
    "\1\51\6\12\1\u0122\13\12\1\34\11\12\15\0\3\12"+
    "\1\u0123\5\12\1\51\22\12\1\34\11\12\15\0\10\12"+
    "\1\u0124\1\51\22\12\1\34\11\12\15\0\10\12\1\u0125"+
    "\1\51\22\12\1\34\11\12\15\0\1\12\1\u0126\7\12"+
    "\1\51\22\12\1\34\11\12\15\0\3\12\1\347\5\12"+
    "\1\51\22\12\1\34\11\12\15\0\11\12\1\51\6\12"+
    "\1\u0127\13\12\1\34\11\12\15\0\14\34\1\130\3\34"+
    "\1\131\1\u0128\24\34\15\0\5\12\1\u0129\3\12\1\51"+
    "\22\12\1\34\11\12\15\0\11\12\1\u012a\7\12\1\154"+
    "\12\12\1\34\11\12\24\0\1\u012b\60\0\1\u012c\55\0"+
    "\5\34\1\370\40\34\15\0\13\34\1\u012d\32\34\15\0"+
    "\11\12\1\51\3\12\1\u012e\16\12\1\34\11\12\15\0"+
    "\12\34\1\u012f\1\34\1\130\3\34\1\131\25\34\15\0"+
    "\10\12\1\u0130\1\51\22\12\1\34\11\12\15\0\10\12"+
    "\1\u0131\1\51\22\12\1\34\11\12\15\0\16\34\1\u0132"+
    "\27\34\15\0\10\34\1\u0133\35\34\15\0\11\12\1\u0134"+
    "\22\12\1\34\11\12\15\0\14\34\1\130\3\34\1\131"+
    "\1\34\1\u0135\23\34\15\0\11\12\1\51\1\12\1\u0136"+
    "\20\12\1\34\11\12\15\0\11\12\1\u0137\22\12\1\34"+
    "\11\12\15\0\3\34\1\u0138\42\34\15\0\17\34\1\370"+
    "\26\34\15\0\14\34\1\130\3\34\1\131\4\34\1\u0139"+
    "\20\34\15\0\3\12\1\u013a\5\12\1\51\22\12\1\34"+
    "\11\12\15\0\10\34\1\u013b\35\34\15\0\1\u013c\45\34"+
    "\15\0\1\u013d\13\34\1\130\3\34\1\131\25\34\15\0"+
    "\4\34\1\u013e\7\34\1\130\3\34\1\131\4\34\1\u0139"+
    "\20\34\15\0\10\12\1\u013f\1\51\22\12\1\34\11\12"+
    "\15\0\1\12\1\u0140\7\12\1\51\22\12\1\34\11\12"+
    "\15\0\11\12\1\51\3\12\1\u0141\16\12\1\34\11\12"+
    "\15\0\11\12\1\51\1\12\1\353\20\12\1\34\11\12"+
    "\15\0\11\12\1\u0142\22\12\1\34\11\12\15\0\11\12"+
    "\1\u0143\22\12\1\34\11\12\15\0\11\12\1\u0144\22\12"+
    "\1\34\11\12\15\0\4\34\1\u0145\41\34\15\0\11\12"+
    "\1\51\1\12\1\u0146\20\12\1\34\11\12\15\0\2\34"+
    "\1\u0147\11\34\1\130\3\34\1\131\25\34\30\0\1\u0148"+
    "\62\0\1\u0149\47\0\15\34\1\277\30\34\15\0\11\12"+
    "\1\u014a\22\12\1\34\11\12\15\0\13\34\1\u014b\32\34"+
    "\15\0\3\12\1\u014c\5\12\1\51\22\12\1\34\11\12"+
    "\15\0\11\12\1\u014d\22\12\1\34\11\12\15\0\3\34"+
    "\1\u014e\42\34\15\0\14\34\1\u014f\31\34\15\0\14\34"+
    "\1\130\1\u0150\2\34\1\131\25\34\15\0\14\34\1\u0151"+
    "\31\34\15\0\7\12\1\u0152\1\12\1\51\22\12\1\34"+
    "\11\12\15\0\3\34\1\u0153\1\34\1\160\1\u0154\5\34"+
    "\1\u0155\1\34\1\u0156\1\34\1\131\1\34\1\u0157\23\34"+
    "\15\0\4\34\1\u014b\41\34\15\0\14\34\1\u0158\31\34"+
    "\15\0\11\12\1\u0159\22\12\1\34\11\12\15\0\21\34"+
    "\1\u015a\24\34\15\0\1\34\1\u015b\44\34\15\0\5\34"+
    "\1\u015c\40\34\15\0\2\34\1\u015d\43\34\15\0\11\12"+
    "\1\u015e\22\12\1\34\11\12\15\0\11\12\1\51\7\12"+
    "\1\u015f\12\12\1\34\11\12\15\0\11\12\1\u0160\22\12"+
    "\1\34\11\12\15\0\14\34\1\130\3\34\1\u0161\25\34"+
    "\15\0\10\34\1\u0162\3\34\1\130\3\34\1\131\25\34"+
    "\15\0\4\34\1\u0163\7\34\1\130\3\34\1\131\25\34"+
    "\15\0\22\34\1\u0164\23\34\15\0\10\12\1\u0165\1\51"+
    "\22\12\1\34\11\12\15\0\14\34\1\u0166\31\34\32\0"+
    "\1\344\63\0\1\u0167\44\0\14\34\1\130\1\u0168\2\34"+
    "\1\131\6\34\1\u0169\16\34\15\0\5\34\1\u016a\40\34"+
    "\15\0\11\12\1\51\1\12\1\u016b\20\12\1\34\11\12"+
    "\15\0\14\34\1\130\3\34\1\131\1\u016c\24\34\15\0"+
    "\14\34\1\u016d\31\34\15\0\10\34\1\u016e\35\34\15\0"+
    "\1\34\1\u016f\44\34\15\0\10\34\1\u0170\35\34\15\0"+
    "\2\12\1\u0171\6\12\1\51\22\12\1\34\11\12\15\0"+
    "\1\34\1\u0172\44\34\15\0\14\34\1\u0173\31\34\15\0"+
    "\2\34\1\220\11\34\1\u0174\31\34\15\0\4\34\1\u0175"+
    "\6\34\1\244\32\34\15\0\3\34\1\u0176\42\34\15\0"+
    "\3\34\1\u015a\42\34\15\0\12\34\1\u0177\1\34\1\130"+
    "\3\34\1\131\25\34\15\0\10\34\1\u015a\35\34\15\0"+
    "\7\34\1\u0178\36\34\15\0\15\34\1\u0179\30\34\15\0"+
    "\2\34\1\u017a\11\34\1\130\3\34\1\131\1\34\1\u017b"+
    "\2\34\1\u017c\20\34\15\0\11\12\1\51\7\12\1\u017d"+
    "\12\12\1\34\11\12\15\0\14\34\1\130\3\34\1\u017e"+
    "\25\34\15\0\7\34\1\u017f\14\34\1\221\21\34\15\0"+
    "\17\34\1\u0180\26\34\15\0\3\34\1\u0181\42\34\15\0"+
    "\22\34\1\u0182\23\34\15\0\11\12\1\51\5\12\1\154"+
    "\14\12\1\34\11\12\15\0\6\34\1\u0183\37\34\20\0"+
    "\1\u0184\57\0\1\34\1\u0185\44\34\15\0\1\34\1\u0186"+
    "\44\34\15\0\1\34\1\370\44\34\15\0\11\12\1\51"+
    "\6\12\1\u0187\13\12\1\34\11\12\15\0\23\34\1\u0188"+
    "\22\34\15\0\3\34\1\u0189\42\34\15\0\13\34\1\u018a"+
    "\32\34\15\0\12\34\1\u018b\33\34\15\0\27\34\1\u015a"+
    "\16\34\15\0\11\12\1\u018c\22\12\1\34\11\12\15\0"+
    "\21\34\1\u018d\24\34\15\0\2\34\1\u018e\43\34\15\0"+
    "\3\34\1\370\42\34\15\0\13\34\1\u018f\32\34\15\0"+
    "\1\34\1\u0190\44\34\15\0\5\34\1\u0191\40\34\15\0"+
    "\16\34\1\370\27\34\15\0\1\34\1\u0192\44\34\15\0"+
    "\14\34\1\u0193\31\34\15\0\17\34\1\u0194\26\34\15\0"+
    "\14\34\1\u0174\31\34\15\0\7\12\1\u011c\1\12\1\51"+
    "\22\12\1\34\11\12\15\0\7\34\1\u0195\14\34\1\221"+
    "\21\34\15\0\2\34\1\u0196\43\34\15\0\22\34\1\u0197"+
    "\23\34\15\0\5\34\1\u015a\40\34\15\0\7\34\1\u0198"+
    "\36\34\15\0\1\34\1\u0199\44\34\31\0\1\u019a\46\0"+
    "\22\34\1\u013b\23\34\15\0\14\34\1\u019b\31\34\15\0"+
    "\11\12\1\u019c\22\12\1\34\11\12\15\0\1\34\1\u019d"+
    "\44\34\15\0\17\34\1\u019e\26\34\15\0\20\34\1\u015a"+
    "\25\34\15\0\21\34\1\370\24\34\15\0\14\34\1\130"+
    "\3\34\1\131\1\34\1\u019f\23\34\15\0\7\34\1\u01a0"+
    "\36\34\15\0\13\34\1\u01a1\32\34\15\0\5\34\1\u01a2"+
    "\40\34\15\0\16\34\1\u01a3\27\34\15\0\14\34\1\u01a4"+
    "\31\34\15\0\3\34\1\u01a5\42\34\15\0\10\34\1\u01a6"+
    "\35\34\15\0\10\34\1\u01a7\35\34\15\0\2\34\1\u01a8"+
    "\43\34\15\0\12\34\1\u01a9\33\34\15\0\1\34\1\u015a"+
    "\44\34\15\0\3\34\1\u015b\42\34\15\0\21\34\1\u01aa"+
    "\24\34\20\0\1\u01ab\57\0\15\34\1\u01ac\30\34\15\0"+
    "\10\34\1\161\3\34\1\130\3\34\1\131\25\34\15\0"+
    "\5\34\1\u01ad\40\34\15\0\11\34\1\u01ae\34\34\15\0"+
    "\3\34\1\u01af\42\34\15\0\4\34\1\u01b0\41\34\15\0"+
    "\12\34\1\161\33\34\15\0\15\34\1\u01b1\30\34\15\0"+
    "\4\34\1\u01b2\41\34\15\0\1\u013b\45\34\15\0\11\34"+
    "\1\u01b3\34\34\15\0\13\34\1\u01b4\32\34\15\0\27\34"+
    "\1\u01b5\16\34\15\0\12\34\1\u01b6\33\34\15\0\13\34"+
    "\1\u01b7\32\34\15\0\22\34\1\u01b8\23\34\34\0\1\u01b9"+
    "\43\0\1\34\1\u01ba\44\34\15\0\1\34\1\u01bb\44\34"+
    "\15\0\22\34\1\u01bc\23\34\15\0\7\34\1\u01bd\36\34"+
    "\15\0\3\34\1\u01be\42\34\15\0\11\34\1\u01bf\34\34"+
    "\15\0\13\34\1\u01c0\32\34\15\0\10\34\1\u01c1\35\34"+
    "\15\0\26\34\1\u01c2\17\34\15\0\7\34\1\u01c3\36\34"+
    "\15\0\13\34\1\u01c4\32\34\15\0\1\370\45\34\15\0"+
    "\14\34\1\u01c5\31\34\15\0\3\34\1\u013b\42\34\15\0"+
    "\10\34\1\u01c6\35\34\15\0\3\34\1\u01c7\42\34\15\0"+
    "\20\34\1\u01c8\25\34\15\0\20\34\1\u016a\25\34\15\0"+
    "\20\34\1\u01c9\25\34\15\0\5\34\1\u01ca\40\34\15\0"+
    "\1\34\1\u01cb\44\34\15\0\1\34\1\277\44\34\15\0"+
    "\2\34\1\277\43\34\15\0\1\u015a\45\34\15\0\20\34"+
    "\1\u0197\25\34\15\0\7\34\1\u01cc\36\34\15\0\7\34"+
    "\1\u01cd\36\34\15\0\1\34\1\u01ce\44\34\15\0\7\34"+
    "\1\u017f\36\34\15\0\10\34\1\u01cf\35\34\15\0\21\34"+
    "\1\u015b\24\34\15\0\2\34\1\u015a\43\34\15\0\25\34"+
    "\1\u01d0\20\34\15\0\21\34\1\u01d1\24\34\15\0\11\34"+
    "\1\u01d2\34\34\15\0\1\34\1\u01d3\44\34\15\0\21\34"+
    "\1\u01d4\24\34\15\0\14\34\1\u017c\31\34\15\0\20\34"+
    "\1\u01d5\25\34\15\0\7\34\1\u01d6\36\34\15\0\10\34"+
    "\1\u01d7\35\34\15\0\3\34\1\u01d8\42\34\15\0\11\34"+
    "\1\u01d9\34\34\15\0\11\34\1\u01da\7\34\1\u015a\24\34"+
    "\15\0\15\34\1\u01db\30\34\15\0\15\34\1\u0168\30\34"+
    "\15\0\13\34\1\u0158\32\34\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[23460];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\34\1\5\11\44\1\1\0"+
    "\6\1\1\11\61\1\1\0\1\1\2\0\3\1\2\0"+
    "\51\1\2\0\2\1\2\0\47\1\4\0\44\1\2\0"+
    "\36\1\2\0\33\1\2\0\35\1\1\0\34\1\1\0"+
    "\25\1\1\0\20\1\1\0\15\1\1\11\42\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[475];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _BuckLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1614) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 6: 
          { return VALUE_STRING;
          }
        case 16: break;
        case 8: 
          { return L_PARENTHESES;
          }
        case 17: break;
        case 10: 
          { return R_PARENTHESES;
          }
        case 18: break;
        case 4: 
          { return EQUAL;
          }
        case 19: break;
        case 9: 
          { return L_BRACKET;
          }
        case 20: break;
        case 3: 
          { return COMMENT;
          }
        case 21: break;
        case 7: 
          { return COMMA;
          }
        case 22: break;
        case 13: 
          { return RULE_NAMES;
          }
        case 23: break;
        case 12: 
          { return KEYWORDS;
          }
        case 24: break;
        case 1: 
          { return IDENTIFIER;
          }
        case 25: break;
        case 14: 
          { return VALUE_BOOLEAN;
          }
        case 26: break;
        case 15: 
          { return VALUE_NONE;
          }
        case 27: break;
        case 2: 
          { return TokenType.WHITE_SPACE;
          }
        case 28: break;
        case 5: 
          { return MACROS;
          }
        case 29: break;
        case 11: 
          { return R_BRACKET;
          }
        case 30: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
